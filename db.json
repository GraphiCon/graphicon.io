{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/logo_small.png","path":"img/logo_small.png","modified":0,"renderable":0},{"_id":"source/img/qrcode_GraphiCon.jpg","path":"img/qrcode_GraphiCon.jpg","modified":0,"renderable":0},{"_id":"themes/apollo/source/favicon_origin.png","path":"favicon_origin.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/apollo/.git","hash":"14cb8d67b270fafd4cdb54ead68534da8a50a353","modified":1489529485392},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1489529485392},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1489529485392},{"_id":"themes/apollo/_config.yml","hash":"949d8b58dbc6e35af085a3a64edb57f5559239e9","modified":1489530300813},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1489529485392},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1489529485392},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1489529485392},{"_id":"source/_posts/Fluid-simulation-1.md","hash":"0969e9819da9eaf7cc825153bbceedac40fa579e","modified":1489570005091},{"_id":"source/_posts/Fluid-simulation-2.md","hash":"a4e5bb65410d8521f9654db22433133b53087bb2","modified":1489947066669},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1489529485388},{"_id":"source/_posts/mesh-deformation-1.md","hash":"c67dbf8e205f0925d89ff8e4861365cf3ab2f073","modified":1489944324771},{"_id":"source/admin/config.yml","hash":"d05b9568803ea359436bf71695f715eec5e86dc6","modified":1489957506894},{"_id":"source/admin/index.html","hash":"7b5ee0e6966e0e441108b2d1a6665566abb1db0e","modified":1489956561856},{"_id":"source/_posts/Shadow-art.md","hash":"d357738583b6676bb2c8c89afbc0d04a4ee5edb7","modified":1489530723346},{"_id":"source/_posts/GraphiCon.md","hash":"9fb632ba679b62ebc0a6ecb57f06bc729a133223","modified":1489529485388},{"_id":"source/about/index.md","hash":"48aa6289e7bc0dd7eca95b9aa52073c9a493ab5e","modified":1489529485388},{"_id":"source/img/logo_small.png","hash":"7d797dfc53ca1320351edd76f70cd2c816862f95","modified":1489529485388},{"_id":"source/img/qrcode_GraphiCon.jpg","hash":"7fa670e85c2840cac26da8525aa5288dcf7bde95","modified":1489529485388},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1489529485392},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1489529485392},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1489529485392},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1489529485392},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1489529485392},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1489529485392},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1489529485392},{"_id":"themes/apollo/source/favicon_origin.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1489529485392},{"_id":"themes/apollo/source/favicon.png","hash":"7d797dfc53ca1320351edd76f70cd2c816862f95","modified":1489529485392},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1489529485392},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1489529485392},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1489529485392},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1489529485392},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1489529485392},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1489529485392},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1489529485392},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"801df942e4be2e94c944d86610deca0fd16b3375","modified":1489530300817},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1489529485392},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1489529485392},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1489529485392},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1489529485392},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1489529485392},{"_id":"source/about/config.yml","hash":"d05b9568803ea359436bf71695f715eec5e86dc6","modified":1489958305706},{"_id":"public/robots.txt","hash":"d5110f11f7fb132b1bf011546b74db55055448ca","modified":1489958405664},{"_id":"public/admin/config.json","hash":"b6384cb8de3ba60170736ce716ebc5aa8149317a","modified":1489958405664},{"_id":"public/atom.xml","hash":"34327cc996b57b39f20fd5c2f2d973976a0d5797","modified":1489958405665},{"_id":"public/sitemap.xml","hash":"707c7f88155aa4f5da89a1daf5e4c721940841ef","modified":1489958838524},{"_id":"public/about/config.json","hash":"b6384cb8de3ba60170736ce716ebc5aa8149317a","modified":1489958405665},{"_id":"public/admin/index.html","hash":"776202b9c2942d39cc0c7efa1f9c5dd7d4ff0ebe","modified":1489958405668},{"_id":"public/2017/03/19/Fluid-simulation-2/index.html","hash":"7edad81defeba0c854f0c04c8e6c696c9475cd74","modified":1489958405668},{"_id":"public/about/index.html","hash":"c8e6a60b194037d4fafae186469b463dd0bdc8c6","modified":1489958405668},{"_id":"public/2017/03/15/Fluid-simulation-1/index.html","hash":"1c2d10ae2a724c48e64e4e06b48b45a8aad0adaf","modified":1489958405668},{"_id":"public/2017/03/13/Shadow-art/index.html","hash":"d958e574405f8ee45f7abe4c4e4ecb648c7132fd","modified":1489958405668},{"_id":"public/2017/03/13/GraphiCon/index.html","hash":"11abdce41b6ce3732396d86ff751a84fc42dc6ca","modified":1489958405668},{"_id":"public/archives/index.html","hash":"5c5fa3c3876ba7037b7741a57e94a0cf1b07a1d7","modified":1489958405668},{"_id":"public/archives/2017/index.html","hash":"76c834cbaaf3b975129655589ed122917ee53664","modified":1489958405669},{"_id":"public/archives/2017/03/index.html","hash":"76c834cbaaf3b975129655589ed122917ee53664","modified":1489958405669},{"_id":"public/tags/Fluid-Simulation/index.html","hash":"f35398583fc909708b83b119e29725947e633acf","modified":1489958405669},{"_id":"public/index.html","hash":"9b4cb65ca016cb9b629c668091b4ac9387119d6a","modified":1489958405669},{"_id":"public/2017/03/16/mesh-deformation-1/index.html","hash":"dc080031fca888937b1d73734b4738b4e3829d4d","modified":1489958405669}],"Category":[],"Data":[],"Page":[{"_content":"backend:\n  name: github\n  repo: origamidance/graphicon.io # Path to your Github repository\n  branch: master # Branch to update\n\n#publish_mode: editorial_workflow\nmedia_folder: \"source/img\" # Media files will be stored in the repo under images/uploads\npublic_folder: \"/img\" # The src attribute for uploaded media will begin with /images/uploads\n\ncollections:\n  - name: \"post\" # Used in routes, e.g. /admin/collections/blog\n    label: \"Post\" # Used in the UI\n    folder: \"source/_posts\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    slug: \"{{slug}}\" # Filename template i.e. YYYY-MM-DD-title.md\n    fields: # The fields for each document, usually in front matter\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\"}\n      - {label: \"Tag\", name: \"tag\", widget: \"string\"}\n ","source":"admin/config.yml","raw":"backend:\n  name: github\n  repo: origamidance/graphicon.io # Path to your Github repository\n  branch: master # Branch to update\n\n#publish_mode: editorial_workflow\nmedia_folder: \"source/img\" # Media files will be stored in the repo under images/uploads\npublic_folder: \"/img\" # The src attribute for uploaded media will begin with /images/uploads\n\ncollections:\n  - name: \"post\" # Used in routes, e.g. /admin/collections/blog\n    label: \"Post\" # Used in the UI\n    folder: \"source/_posts\" # The path to the folder where the documents are stored\n    create: true # Allow users to create new documents in this collection\n    slug: \"{{slug}}\" # Filename template i.e. YYYY-MM-DD-title.md\n    fields: # The fields for each document, usually in front matter\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\"}\n      - {label: \"Tag\", name: \"tag\", widget: \"string\"}\n ","date":"2017-03-19T21:05:06.894Z","updated":"2017-03-19T21:05:06.894Z","path":"admin/config.json","layout":"false","title":"","comments":1,"_id":"cj0h6gatv00015xdau33dfj0m","content":"{\"backend\":{\"name\":\"github\",\"repo\":\"origamidance/graphicon.io\",\"branch\":\"master\"},\"media_folder\":\"source/img\",\"public_folder\":\"/img\",\"collections\":[{\"name\":\"post\",\"label\":\"Post\",\"folder\":\"source/_posts\",\"create\":true,\"slug\":\"\",\"fields\":[{\"label\":\"Title\",\"name\":\"title\",\"widget\":\"string\"},{\"label\":\"Publish Date\",\"name\":\"date\",\"widget\":\"datetime\"},{\"label\":\"Tag\",\"name\":\"tag\",\"widget\":\"string\"}]}]}","excerpt":"","more":"{\"backend\":{\"name\":\"github\",\"repo\":\"origamidance/graphicon.io\",\"branch\":\"master\"},\"media_folder\":\"source/img\",\"public_folder\":\"/img\",\"collections\":[{\"name\":\"post\",\"label\":\"Post\",\"folder\":\"source/_posts\",\"create\":true,\"slug\":\"\",\"fields\":[{\"label\":\"Title\",\"name\":\"title\",\"widget\":\"string\"},{\"label\":\"Publish Date\",\"name\":\"date\",\"widget\":\"datetime\"},{\"label\":\"Tag\",\"name\":\"tag\",\"widget\":\"string\"}]}]}"},{"_content":"<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Content Manager</title>\n\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.css\" />\n\n</head>\n<body>\n  <script src=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.js\"></script>\n</body>\n</html>","source":"admin/index.html","raw":"<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Content Manager</title>\n\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.css\" />\n\n</head>\n<body>\n  <script src=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.js\"></script>\n</body>\n</html>","date":"2017-03-19T20:49:21.856Z","updated":"2017-03-19T20:49:21.856Z","path":"admin/index.html","title":"","comments":1,"layout":"page","_id":"cj0h6gatx00035xda0vzvbw8v","content":"<!doctype html>\n<html>\n<head>\n  <!-- hexo-inject:begin --><!-- hexo-inject:end --><meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Content Manager</title>\n\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.css\"><!-- hexo-inject:begin --><!-- hexo-inject:end -->\n\n</head>\n<body>\n  <!-- hexo-inject:begin --><!-- hexo-inject:end --><script src=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.js\"></script><!-- hexo-inject:begin --><!-- hexo-inject:end -->\n</body>\n</html>","excerpt":"","more":"<!doctype html>\n<html>\n<head>\n  <!-- hexo-inject:begin --><!-- hexo-inject:end --><meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Content Manager</title>\n\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.css\" /><!-- hexo-inject:begin --><!-- hexo-inject:end -->\n\n</head>\n<body>\n  <!-- hexo-inject:begin --><!-- hexo-inject:end --><script src=\"https://unpkg.com/netlify-cms@^0.3/dist/cms.js\"></script><!-- hexo-inject:begin --><!-- hexo-inject:end -->\n</body>\n</html>"},{"title":"about us","date":"2017-03-13T10:02:55.000Z","_content":"GraphiCon是我们创建的关于图形学和可视化的UGC媒体。\n\nGraphiCon取GraphicsCon图形控之意（类比lolicon）。\n\n我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。\n\nGraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。\n只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！\n\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qrcode_GraphiCon.jpg](https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg)\n\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n","source":"about/index.md","raw":"---\ntitle: about us\ndate: 2017-03-13 11:02:55\n---\nGraphiCon是我们创建的关于图形学和可视化的UGC媒体。\n\nGraphiCon取GraphicsCon图形控之意（类比lolicon）。\n\n我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。\n\nGraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。\n只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！\n\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qrcode_GraphiCon.jpg](https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg)\n\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n","updated":"2017-03-14T22:11:25.388Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0h6gb26000a5xdaha0e9210","content":"<p>GraphiCon是我们创建的关于图形学和可视化的UGC媒体。</p>\n<p>GraphiCon取GraphicsCon图形控之意（类比lolicon）。</p>\n<p>我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。</p>\n<p>GraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。<br>只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！</p>\n<p>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\" target=\"_blank\" rel=\"external\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg\" alt=\"qrcode_GraphiCon.jpg\"></p>\n<p>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\" target=\"_blank\" rel=\"external\">GraphiCon</a></p>\n","excerpt":"","more":"<p>GraphiCon是我们创建的关于图形学和可视化的UGC媒体。</p>\n<p>GraphiCon取GraphicsCon图形控之意（类比lolicon）。</p>\n<p>我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。</p>\n<p>GraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。<br>只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！</p>\n<p>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg\" alt=\"qrcode_GraphiCon.jpg\"></p>\n<p>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\">GraphiCon</a></p>\n"}],"Post":[{"title":"电影工业中的流体模拟（一）- 简介","date":"2017-03-15T09:20:53.000Z","_content":"\n在电影工业中，经常需要模拟大量复杂的自然现象。其中如水、烟、火焰等流体更是模拟的重中之重。对于这些自然现象，在计算机能力尚不足的年代，常用实拍+后期剪辑完成。然而，这样做，整体效果非常难以控制；而再要满足剧本和导演的一些特殊要求，或者作出一些超自然的效果，则更是难上加难了。\n![经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。](https://i.imgur.com/b7ZoFhi.gif)\n(经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。)\n<!--more-->\n\n随着计算机硬件性能的发展，如今的电影工业中，大规模的流体计算开始显露自己的身手。其相关技术通常被用于实现现实中难以完成的特效场景。如电影《星际穿越》中高达四千英尺的惊天海啸（图片版权归出品方所有），\n![电影《星际穿越》中的海啸。图片版权归出品方所有。](https://i.imgur.com/8AWV12z.jpg)\n\n以及电影《少年派》中巨鲸出水的场景（图片版权归出品方所有）。\n![电影《少年派》中的巨鲸出水。图片版权归出品方所有。](https://i.imgur.com/i0Nft5Y.jpg)\n在这些场景中，基于物理的流体模拟技术扮演了难以替代的角色。而这些技术生成的大量细节与真实感，是实景拍摄与拼贴等传统方法难以实现的。\n\n在动画电影的制作上，流体模拟也起到了非常重要的作用，甚至在一些与水相关的题材的动画中占领了制作的大部分时间。如《海洋奇缘》中灵性十足的水的模拟与控制，则是综合了艺术家想象与严格的物理过程的作品（图片版权归出品方所有）。\n![动画电影《海洋奇缘》](https://i.imgur.com/qiz6IFp.gif)\n\n这些特效背后，需要大量的数值计算，而这些算法便是归属于计算机图形学的范畴。与计算流体物理、空气动力学等学科专注于小范围的精确计算不同的是，计算机图形学中的流体模拟除了需要实现一定物理真实的效果之外，更需要在预算可控的时间内，完成对现实中大场景的流体的模拟；同时还要满足艺术家对于物理效果可控、易于操纵的需求。\n\n因此，在这数十年中，随着计算机图形学的发展，这些应用于电影、动画特效中的流体模拟技术，在吸收了大量来自流体动力学、数值计算等学科的成果之后，也形成了一个独特的分支。了解和学习这些技术，对于中国电影工业的发展也是必不可少的。\n\n在接下来的一段时间，图形控（Graphicon）将对电影工业中常用的流体模拟技术进行详细的介绍。除了介绍相关的数学、物理知识以外，也会对具体的算法及其实现方法进行一些讲解说明。我们也将试图揭开如Maya、Houdini、RealFlow等特效制作工具背后的一些知识，让大家对电影制作中常用的流体模拟技术有更深刻的理解。\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/12/58c52755a9463.jpg)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.herokuapp.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","source":"_posts/Fluid-simulation-1.md","raw":"---\ntitle: 电影工业中的流体模拟（一）- 简介\ndate: 2017-03-15 10:20:53\ntags: Fluid Simulation\n---\n\n在电影工业中，经常需要模拟大量复杂的自然现象。其中如水、烟、火焰等流体更是模拟的重中之重。对于这些自然现象，在计算机能力尚不足的年代，常用实拍+后期剪辑完成。然而，这样做，整体效果非常难以控制；而再要满足剧本和导演的一些特殊要求，或者作出一些超自然的效果，则更是难上加难了。\n![经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。](https://i.imgur.com/b7ZoFhi.gif)\n(经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。)\n<!--more-->\n\n随着计算机硬件性能的发展，如今的电影工业中，大规模的流体计算开始显露自己的身手。其相关技术通常被用于实现现实中难以完成的特效场景。如电影《星际穿越》中高达四千英尺的惊天海啸（图片版权归出品方所有），\n![电影《星际穿越》中的海啸。图片版权归出品方所有。](https://i.imgur.com/8AWV12z.jpg)\n\n以及电影《少年派》中巨鲸出水的场景（图片版权归出品方所有）。\n![电影《少年派》中的巨鲸出水。图片版权归出品方所有。](https://i.imgur.com/i0Nft5Y.jpg)\n在这些场景中，基于物理的流体模拟技术扮演了难以替代的角色。而这些技术生成的大量细节与真实感，是实景拍摄与拼贴等传统方法难以实现的。\n\n在动画电影的制作上，流体模拟也起到了非常重要的作用，甚至在一些与水相关的题材的动画中占领了制作的大部分时间。如《海洋奇缘》中灵性十足的水的模拟与控制，则是综合了艺术家想象与严格的物理过程的作品（图片版权归出品方所有）。\n![动画电影《海洋奇缘》](https://i.imgur.com/qiz6IFp.gif)\n\n这些特效背后，需要大量的数值计算，而这些算法便是归属于计算机图形学的范畴。与计算流体物理、空气动力学等学科专注于小范围的精确计算不同的是，计算机图形学中的流体模拟除了需要实现一定物理真实的效果之外，更需要在预算可控的时间内，完成对现实中大场景的流体的模拟；同时还要满足艺术家对于物理效果可控、易于操纵的需求。\n\n因此，在这数十年中，随着计算机图形学的发展，这些应用于电影、动画特效中的流体模拟技术，在吸收了大量来自流体动力学、数值计算等学科的成果之后，也形成了一个独特的分支。了解和学习这些技术，对于中国电影工业的发展也是必不可少的。\n\n在接下来的一段时间，图形控（Graphicon）将对电影工业中常用的流体模拟技术进行详细的介绍。除了介绍相关的数学、物理知识以外，也会对具体的算法及其实现方法进行一些讲解说明。我们也将试图揭开如Maya、Houdini、RealFlow等特效制作工具背后的一些知识，让大家对电影制作中常用的流体模拟技术有更深刻的理解。\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/12/58c52755a9463.jpg)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.herokuapp.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","slug":"Fluid-simulation-1","published":1,"updated":"2017-03-15T09:26:45.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0h6gats00005xdaxd4qu4ll","content":"<p>在电影工业中，经常需要模拟大量复杂的自然现象。其中如水、烟、火焰等流体更是模拟的重中之重。对于这些自然现象，在计算机能力尚不足的年代，常用实拍+后期剪辑完成。然而，这样做，整体效果非常难以控制；而再要满足剧本和导演的一些特殊要求，或者作出一些超自然的效果，则更是难上加难了。<br><img src=\"https://i.imgur.com/b7ZoFhi.gif\" alt=\"经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。\"><br>(经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。)<br><a id=\"more\"></a></p>\n<p>随着计算机硬件性能的发展，如今的电影工业中，大规模的流体计算开始显露自己的身手。其相关技术通常被用于实现现实中难以完成的特效场景。如电影《星际穿越》中高达四千英尺的惊天海啸（图片版权归出品方所有），<br><img src=\"https://i.imgur.com/8AWV12z.jpg\" alt=\"电影《星际穿越》中的海啸。图片版权归出品方所有。\"></p>\n<p>以及电影《少年派》中巨鲸出水的场景（图片版权归出品方所有）。<br><img src=\"https://i.imgur.com/i0Nft5Y.jpg\" alt=\"电影《少年派》中的巨鲸出水。图片版权归出品方所有。\"><br>在这些场景中，基于物理的流体模拟技术扮演了难以替代的角色。而这些技术生成的大量细节与真实感，是实景拍摄与拼贴等传统方法难以实现的。</p>\n<p>在动画电影的制作上，流体模拟也起到了非常重要的作用，甚至在一些与水相关的题材的动画中占领了制作的大部分时间。如《海洋奇缘》中灵性十足的水的模拟与控制，则是综合了艺术家想象与严格的物理过程的作品（图片版权归出品方所有）。<br><img src=\"https://i.imgur.com/qiz6IFp.gif\" alt=\"动画电影《海洋奇缘》\"></p>\n<p>这些特效背后，需要大量的数值计算，而这些算法便是归属于计算机图形学的范畴。与计算流体物理、空气动力学等学科专注于小范围的精确计算不同的是，计算机图形学中的流体模拟除了需要实现一定物理真实的效果之外，更需要在预算可控的时间内，完成对现实中大场景的流体的模拟；同时还要满足艺术家对于物理效果可控、易于操纵的需求。</p>\n<p>因此，在这数十年中，随着计算机图形学的发展，这些应用于电影、动画特效中的流体模拟技术，在吸收了大量来自流体动力学、数值计算等学科的成果之后，也形成了一个独特的分支。了解和学习这些技术，对于中国电影工业的发展也是必不可少的。</p>\n<p>在接下来的一段时间，图形控（Graphicon）将对电影工业中常用的流体模拟技术进行详细的介绍。除了介绍相关的数学、物理知识以外，也会对具体的算法及其实现方法进行一些讲解说明。我们也将试图揭开如Maya、Houdini、RealFlow等特效制作工具背后的一些知识，让大家对电影制作中常用的流体模拟技术有更深刻的理解。</p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\" target=\"_blank\" rel=\"external\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/12/58c52755a9463.jpg\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.herokuapp.com/\" target=\"_blank\" rel=\"external\">GraphiCon</a></p>\n<p><a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\"></a><br>本作品采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>\n","excerpt":"<p>在电影工业中，经常需要模拟大量复杂的自然现象。其中如水、烟、火焰等流体更是模拟的重中之重。对于这些自然现象，在计算机能力尚不足的年代，常用实拍+后期剪辑完成。然而，这样做，整体效果非常难以控制；而再要满足剧本和导演的一些特殊要求，或者作出一些超自然的效果，则更是难上加难了。<br><img src=\"https://i.imgur.com/b7ZoFhi.gif\" alt=\"经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。\"><br>(经典的受控流体特效：电影《魔戒》中甘道夫吹出了一朵小船形状的烟。图片版权归出品方所有。)<br>","more":"</p>\n<p>随着计算机硬件性能的发展，如今的电影工业中，大规模的流体计算开始显露自己的身手。其相关技术通常被用于实现现实中难以完成的特效场景。如电影《星际穿越》中高达四千英尺的惊天海啸（图片版权归出品方所有），<br><img src=\"https://i.imgur.com/8AWV12z.jpg\" alt=\"电影《星际穿越》中的海啸。图片版权归出品方所有。\"></p>\n<p>以及电影《少年派》中巨鲸出水的场景（图片版权归出品方所有）。<br><img src=\"https://i.imgur.com/i0Nft5Y.jpg\" alt=\"电影《少年派》中的巨鲸出水。图片版权归出品方所有。\"><br>在这些场景中，基于物理的流体模拟技术扮演了难以替代的角色。而这些技术生成的大量细节与真实感，是实景拍摄与拼贴等传统方法难以实现的。</p>\n<p>在动画电影的制作上，流体模拟也起到了非常重要的作用，甚至在一些与水相关的题材的动画中占领了制作的大部分时间。如《海洋奇缘》中灵性十足的水的模拟与控制，则是综合了艺术家想象与严格的物理过程的作品（图片版权归出品方所有）。<br><img src=\"https://i.imgur.com/qiz6IFp.gif\" alt=\"动画电影《海洋奇缘》\"></p>\n<p>这些特效背后，需要大量的数值计算，而这些算法便是归属于计算机图形学的范畴。与计算流体物理、空气动力学等学科专注于小范围的精确计算不同的是，计算机图形学中的流体模拟除了需要实现一定物理真实的效果之外，更需要在预算可控的时间内，完成对现实中大场景的流体的模拟；同时还要满足艺术家对于物理效果可控、易于操纵的需求。</p>\n<p>因此，在这数十年中，随着计算机图形学的发展，这些应用于电影、动画特效中的流体模拟技术，在吸收了大量来自流体动力学、数值计算等学科的成果之后，也形成了一个独特的分支。了解和学习这些技术，对于中国电影工业的发展也是必不可少的。</p>\n<p>在接下来的一段时间，图形控（Graphicon）将对电影工业中常用的流体模拟技术进行详细的介绍。除了介绍相关的数学、物理知识以外，也会对具体的算法及其实现方法进行一些讲解说明。我们也将试图揭开如Maya、Houdini、RealFlow等特效制作工具背后的一些知识，让大家对电影制作中常用的流体模拟技术有更深刻的理解。</p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/12/58c52755a9463.jpg\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.herokuapp.com/\">GraphiCon</a></p>\n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>"},{"title":"电影工业中的流体模拟（二）- 数学基础","date":"2017-03-19T17:26:20.000Z","_content":"在本章之中，我们对流体模拟中需要用到的数学概念进行简单的介绍，其中包括梯度、散度、旋度、拉普拉斯算子与高斯定理等。为了便于阅读，以下对这些概念以及涉及的公式统一使用流体模拟相关文献常用的记号方式。\n<!--more-->\n\n**梯度**\n一个函数的梯度(gradient)用于描述这个函数在给定空间中上升最快的方向。如图：\n![梯度](https://i.imgur.com/TlGdOJy.png)\n这张图中蓝色网格便是函数 $f(x,y) = −(cos^2x + cos^2y)^2$ 的图像，下面的红色箭头则绘制了该函数在二维空间中毎点的梯度场。\n计算一个函数的梯度就是计算它所有分量上的空间偏导数，组合为一个向量，即函数在该点的梯度。比如，在三维空间中，函数 $f(x, y, z)$ 的梯度即写成：\n$$\\nabla f(x,y,z)=(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z})$$\n其中$$\\frac{\\partial f}{\\partial x}$$ 即是函数$f$ 在$x$方向的偏导数。\n\n有些时候，我们需要知道函数在特定方向上的变化率，通过将梯度与该方向的向量点乘，我们就可以计算出函数在这一点的方向导数，如函数 $f$ 在方向 $\\boldsymbol{n}$ 上的方向导数记为：\n$$\\frac{\\partial f}{\\partial \\boldsymbol{n}}=\\nabla f\\cdot\\boldsymbol{n}$$\n\n**散度**\n散度(divergence)算子用于描述向量场中在某点的聚集或发散程度，如图：\n![散度](https://i.imgur.com/RUggoZ8.jpg)\n左边的向量场在中心点散度为正，中间的向量场在中心点散度为负，右边的向量场在各点散度为零。\n\n在三维空间中，向量场$\\boldsymbol{u}$的散度可以写成（这里我们用粗体的$\\boldsymbol{u}$表示向量场，普通的$u$则表示在第一个维度上的分量）：\n$$\\nabla\\cdot\\boldsymbol{u}=\\nabla\\cdot(u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$\n注意虽然散度仅仅对向量场才有意义，但它本身是标量而不是向量。另外，散度符号之所以记成这样的形式是因为它也可以理解为梯度算子与向量场的点乘：\n$$\\nabla\\cdot\\boldsymbol{u}=(\\frac{\\partial}{\\partial x}, \\frac{\\partial}{\\partial y}, \\frac{\\partial}{\\partial z})\\cdot (u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$\n在流体模拟中，由于水、油等液体通常具有难以压缩(incompressible)的性质，因此这些液体的速度场通常被认为散度为零，这些散度为零的向量场也被称为无散场。尽管在实际计算过程中，实现这一约束通常是最耗时的一步，但通常认为，这种无散的特性，是在视觉上让模拟具有真实感的最重要的一步。\n\n比如下面的图，展示了一个变化中的无散度的随机速度场。即便是这样一个随机场，在散度为零的时候，顺着这些速度运动的粒子都能在视觉上表现出很强的流体特征：\n![随机无散场](https://i.imgur.com/dzunYiq.gif)\n对于无散场与流体模拟的更深刻的关系，以及如何在计算中保证速度场散度为零，我们将在后续的章节中进行深入介绍。\n\n**旋度**\n旋度(curl)算子，顾名思义，用于描述向量场绕某点旋转的剧烈程度及方向。\n![旋度](https://i.imgur.com/9jAsHWd.png)\n在三维空间中旋度是一个向量，它的计算方式为：\n$$\\nabla\\times\\boldsymbol{u}=\\nabla\\times (u,v,w)=(\\frac{\\partial w}{\\partial y}-\\frac{\\partial v}{\\partial z}, \\frac{\\partial u}{\\partial z}-\\frac{\\partial w}{\\partial x}, \\frac{\\partial v}{\\partial x}-\\frac{\\partial u}{\\partial y})$$\n要注意的是，一个向量场的旋度场是无散的，即我们总有：\n$$\\nabla\\cdot\\nabla\\times\\boldsymbol{u}=0$$\n因此，在制作特效中，一些不需要太多真实感的流体模拟，可以用一种称为**旋度噪声**（[Curl Noise](http://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph2007-curlnoise.pdf)）的技术完成。具体说来，便是生成一些根据时间变化的三维[Perlin噪声](https://zhuanlan.zhihu.com/p/22337544)，然后取其旋度作为速度场，并将粒子顺着速度场移动，即可得到如下效果：\n![旋度噪声](https://i.imgur.com/Z8aaI3L.jpg)\n有兴趣的读者可以在这里看到WebGL实现的可交互效果和代码：\nhttp://graphics.thew.nu/curl/\n以及其他的一些[实现细节](http://prideout.net/blog/?p=63)\n\n在接下来的章节，我们将利用以上的数学知识，从描述流体的最基本方程（纳维-斯托克斯方程）讲到如何生成细节丰富的特效。敬请期待。\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.herokuapp.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n\n","source":"_posts/Fluid-simulation-2.md","raw":"---\ntitle: 电影工业中的流体模拟（二）- 数学基础\ndate: 2017-03-19 18:26:20\ntags:\n---\n在本章之中，我们对流体模拟中需要用到的数学概念进行简单的介绍，其中包括梯度、散度、旋度、拉普拉斯算子与高斯定理等。为了便于阅读，以下对这些概念以及涉及的公式统一使用流体模拟相关文献常用的记号方式。\n<!--more-->\n\n**梯度**\n一个函数的梯度(gradient)用于描述这个函数在给定空间中上升最快的方向。如图：\n![梯度](https://i.imgur.com/TlGdOJy.png)\n这张图中蓝色网格便是函数 $f(x,y) = −(cos^2x + cos^2y)^2$ 的图像，下面的红色箭头则绘制了该函数在二维空间中毎点的梯度场。\n计算一个函数的梯度就是计算它所有分量上的空间偏导数，组合为一个向量，即函数在该点的梯度。比如，在三维空间中，函数 $f(x, y, z)$ 的梯度即写成：\n$$\\nabla f(x,y,z)=(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z})$$\n其中$$\\frac{\\partial f}{\\partial x}$$ 即是函数$f$ 在$x$方向的偏导数。\n\n有些时候，我们需要知道函数在特定方向上的变化率，通过将梯度与该方向的向量点乘，我们就可以计算出函数在这一点的方向导数，如函数 $f$ 在方向 $\\boldsymbol{n}$ 上的方向导数记为：\n$$\\frac{\\partial f}{\\partial \\boldsymbol{n}}=\\nabla f\\cdot\\boldsymbol{n}$$\n\n**散度**\n散度(divergence)算子用于描述向量场中在某点的聚集或发散程度，如图：\n![散度](https://i.imgur.com/RUggoZ8.jpg)\n左边的向量场在中心点散度为正，中间的向量场在中心点散度为负，右边的向量场在各点散度为零。\n\n在三维空间中，向量场$\\boldsymbol{u}$的散度可以写成（这里我们用粗体的$\\boldsymbol{u}$表示向量场，普通的$u$则表示在第一个维度上的分量）：\n$$\\nabla\\cdot\\boldsymbol{u}=\\nabla\\cdot(u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$\n注意虽然散度仅仅对向量场才有意义，但它本身是标量而不是向量。另外，散度符号之所以记成这样的形式是因为它也可以理解为梯度算子与向量场的点乘：\n$$\\nabla\\cdot\\boldsymbol{u}=(\\frac{\\partial}{\\partial x}, \\frac{\\partial}{\\partial y}, \\frac{\\partial}{\\partial z})\\cdot (u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$\n在流体模拟中，由于水、油等液体通常具有难以压缩(incompressible)的性质，因此这些液体的速度场通常被认为散度为零，这些散度为零的向量场也被称为无散场。尽管在实际计算过程中，实现这一约束通常是最耗时的一步，但通常认为，这种无散的特性，是在视觉上让模拟具有真实感的最重要的一步。\n\n比如下面的图，展示了一个变化中的无散度的随机速度场。即便是这样一个随机场，在散度为零的时候，顺着这些速度运动的粒子都能在视觉上表现出很强的流体特征：\n![随机无散场](https://i.imgur.com/dzunYiq.gif)\n对于无散场与流体模拟的更深刻的关系，以及如何在计算中保证速度场散度为零，我们将在后续的章节中进行深入介绍。\n\n**旋度**\n旋度(curl)算子，顾名思义，用于描述向量场绕某点旋转的剧烈程度及方向。\n![旋度](https://i.imgur.com/9jAsHWd.png)\n在三维空间中旋度是一个向量，它的计算方式为：\n$$\\nabla\\times\\boldsymbol{u}=\\nabla\\times (u,v,w)=(\\frac{\\partial w}{\\partial y}-\\frac{\\partial v}{\\partial z}, \\frac{\\partial u}{\\partial z}-\\frac{\\partial w}{\\partial x}, \\frac{\\partial v}{\\partial x}-\\frac{\\partial u}{\\partial y})$$\n要注意的是，一个向量场的旋度场是无散的，即我们总有：\n$$\\nabla\\cdot\\nabla\\times\\boldsymbol{u}=0$$\n因此，在制作特效中，一些不需要太多真实感的流体模拟，可以用一种称为**旋度噪声**（[Curl Noise](http://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph2007-curlnoise.pdf)）的技术完成。具体说来，便是生成一些根据时间变化的三维[Perlin噪声](https://zhuanlan.zhihu.com/p/22337544)，然后取其旋度作为速度场，并将粒子顺着速度场移动，即可得到如下效果：\n![旋度噪声](https://i.imgur.com/Z8aaI3L.jpg)\n有兴趣的读者可以在这里看到WebGL实现的可交互效果和代码：\nhttp://graphics.thew.nu/curl/\n以及其他的一些[实现细节](http://prideout.net/blog/?p=63)\n\n在接下来的章节，我们将利用以上的数学知识，从描述流体的最基本方程（纳维-斯托克斯方程）讲到如何生成细节丰富的特效。敬请期待。\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.herokuapp.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n\n","slug":"Fluid-simulation-2","published":1,"updated":"2017-03-19T18:11:06.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0h6gatw00025xdaquconb5j","content":"<p>在本章之中，我们对流体模拟中需要用到的数学概念进行简单的介绍，其中包括梯度、散度、旋度、拉普拉斯算子与高斯定理等。为了便于阅读，以下对这些概念以及涉及的公式统一使用流体模拟相关文献常用的记号方式。<br><a id=\"more\"></a></p>\n<p><strong>梯度</strong><br>一个函数的梯度(gradient)用于描述这个函数在给定空间中上升最快的方向。如图：<br><img src=\"https://i.imgur.com/TlGdOJy.png\" alt=\"梯度\"><br>这张图中蓝色网格便是函数 $f(x,y) = −(cos^2x + cos^2y)^2$ 的图像，下面的红色箭头则绘制了该函数在二维空间中毎点的梯度场。<br>计算一个函数的梯度就是计算它所有分量上的空间偏导数，组合为一个向量，即函数在该点的梯度。比如，在三维空间中，函数 $f(x, y, z)$ 的梯度即写成：<br>$$\\nabla f(x,y,z)=(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z})$$<br>其中$$\\frac{\\partial f}{\\partial x}$$ 即是函数$f$ 在$x$方向的偏导数。</p>\n<p>有些时候，我们需要知道函数在特定方向上的变化率，通过将梯度与该方向的向量点乘，我们就可以计算出函数在这一点的方向导数，如函数 $f$ 在方向 $\\boldsymbol{n}$ 上的方向导数记为：<br>$$\\frac{\\partial f}{\\partial \\boldsymbol{n}}=\\nabla f\\cdot\\boldsymbol{n}$$</p>\n<p><strong>散度</strong><br>散度(divergence)算子用于描述向量场中在某点的聚集或发散程度，如图：<br><img src=\"https://i.imgur.com/RUggoZ8.jpg\" alt=\"散度\"><br>左边的向量场在中心点散度为正，中间的向量场在中心点散度为负，右边的向量场在各点散度为零。</p>\n<p>在三维空间中，向量场$\\boldsymbol{u}$的散度可以写成（这里我们用粗体的$\\boldsymbol{u}$表示向量场，普通的$u$则表示在第一个维度上的分量）：<br>$$\\nabla\\cdot\\boldsymbol{u}=\\nabla\\cdot(u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$<br>注意虽然散度仅仅对向量场才有意义，但它本身是标量而不是向量。另外，散度符号之所以记成这样的形式是因为它也可以理解为梯度算子与向量场的点乘：<br>$$\\nabla\\cdot\\boldsymbol{u}=(\\frac{\\partial}{\\partial x}, \\frac{\\partial}{\\partial y}, \\frac{\\partial}{\\partial z})\\cdot (u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$<br>在流体模拟中，由于水、油等液体通常具有难以压缩(incompressible)的性质，因此这些液体的速度场通常被认为散度为零，这些散度为零的向量场也被称为无散场。尽管在实际计算过程中，实现这一约束通常是最耗时的一步，但通常认为，这种无散的特性，是在视觉上让模拟具有真实感的最重要的一步。</p>\n<p>比如下面的图，展示了一个变化中的无散度的随机速度场。即便是这样一个随机场，在散度为零的时候，顺着这些速度运动的粒子都能在视觉上表现出很强的流体特征：<br><img src=\"https://i.imgur.com/dzunYiq.gif\" alt=\"随机无散场\"><br>对于无散场与流体模拟的更深刻的关系，以及如何在计算中保证速度场散度为零，我们将在后续的章节中进行深入介绍。</p>\n<p><strong>旋度</strong><br>旋度(curl)算子，顾名思义，用于描述向量场绕某点旋转的剧烈程度及方向。<br><img src=\"https://i.imgur.com/9jAsHWd.png\" alt=\"旋度\"><br>在三维空间中旋度是一个向量，它的计算方式为：<br>$$\\nabla\\times\\boldsymbol{u}=\\nabla\\times (u,v,w)=(\\frac{\\partial w}{\\partial y}-\\frac{\\partial v}{\\partial z}, \\frac{\\partial u}{\\partial z}-\\frac{\\partial w}{\\partial x}, \\frac{\\partial v}{\\partial x}-\\frac{\\partial u}{\\partial y})$$<br>要注意的是，一个向量场的旋度场是无散的，即我们总有：<br>$$\\nabla\\cdot\\nabla\\times\\boldsymbol{u}=0$$<br>因此，在制作特效中，一些不需要太多真实感的流体模拟，可以用一种称为<strong>旋度噪声</strong>（<a href=\"http://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph2007-curlnoise.pdf\" target=\"_blank\" rel=\"external\">Curl Noise</a>）的技术完成。具体说来，便是生成一些根据时间变化的三维<a href=\"https://zhuanlan.zhihu.com/p/22337544\" target=\"_blank\" rel=\"external\">Perlin噪声</a>，然后取其旋度作为速度场，并将粒子顺着速度场移动，即可得到如下效果：<br><img src=\"https://i.imgur.com/Z8aaI3L.jpg\" alt=\"旋度噪声\"><br>有兴趣的读者可以在这里看到WebGL实现的可交互效果和代码：<br><a href=\"http://graphics.thew.nu/curl/\" target=\"_blank\" rel=\"external\">http://graphics.thew.nu/curl/</a><br>以及其他的一些<a href=\"http://prideout.net/blog/?p=63\" target=\"_blank\" rel=\"external\">实现细节</a></p>\n<p>在接下来的章节，我们将利用以上的数学知识，从描述流体的最基本方程（纳维-斯托克斯方程）讲到如何生成细节丰富的特效。敬请期待。</p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\" target=\"_blank\" rel=\"external\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.herokuapp.com/\" target=\"_blank\" rel=\"external\">GraphiCon</a></p>\n<p><a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\"></a><br>本作品采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>\n","excerpt":"<p>在本章之中，我们对流体模拟中需要用到的数学概念进行简单的介绍，其中包括梯度、散度、旋度、拉普拉斯算子与高斯定理等。为了便于阅读，以下对这些概念以及涉及的公式统一使用流体模拟相关文献常用的记号方式。<br>","more":"</p>\n<p><strong>梯度</strong><br>一个函数的梯度(gradient)用于描述这个函数在给定空间中上升最快的方向。如图：<br><img src=\"https://i.imgur.com/TlGdOJy.png\" alt=\"梯度\"><br>这张图中蓝色网格便是函数 $f(x,y) = −(cos^2x + cos^2y)^2$ 的图像，下面的红色箭头则绘制了该函数在二维空间中毎点的梯度场。<br>计算一个函数的梯度就是计算它所有分量上的空间偏导数，组合为一个向量，即函数在该点的梯度。比如，在三维空间中，函数 $f(x, y, z)$ 的梯度即写成：<br>$$\\nabla f(x,y,z)=(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y}, \\frac{\\partial f}{\\partial z})$$<br>其中$$\\frac{\\partial f}{\\partial x}$$ 即是函数$f$ 在$x$方向的偏导数。</p>\n<p>有些时候，我们需要知道函数在特定方向上的变化率，通过将梯度与该方向的向量点乘，我们就可以计算出函数在这一点的方向导数，如函数 $f$ 在方向 $\\boldsymbol{n}$ 上的方向导数记为：<br>$$\\frac{\\partial f}{\\partial \\boldsymbol{n}}=\\nabla f\\cdot\\boldsymbol{n}$$</p>\n<p><strong>散度</strong><br>散度(divergence)算子用于描述向量场中在某点的聚集或发散程度，如图：<br><img src=\"https://i.imgur.com/RUggoZ8.jpg\" alt=\"散度\"><br>左边的向量场在中心点散度为正，中间的向量场在中心点散度为负，右边的向量场在各点散度为零。</p>\n<p>在三维空间中，向量场$\\boldsymbol{u}$的散度可以写成（这里我们用粗体的$\\boldsymbol{u}$表示向量场，普通的$u$则表示在第一个维度上的分量）：<br>$$\\nabla\\cdot\\boldsymbol{u}=\\nabla\\cdot(u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$<br>注意虽然散度仅仅对向量场才有意义，但它本身是标量而不是向量。另外，散度符号之所以记成这样的形式是因为它也可以理解为梯度算子与向量场的点乘：<br>$$\\nabla\\cdot\\boldsymbol{u}=(\\frac{\\partial}{\\partial x}, \\frac{\\partial}{\\partial y}, \\frac{\\partial}{\\partial z})\\cdot (u,v,w)=\\frac{\\partial u}{\\partial x}+\\frac{\\partial v}{\\partial x}+\\frac{\\partial w}{\\partial x}$$<br>在流体模拟中，由于水、油等液体通常具有难以压缩(incompressible)的性质，因此这些液体的速度场通常被认为散度为零，这些散度为零的向量场也被称为无散场。尽管在实际计算过程中，实现这一约束通常是最耗时的一步，但通常认为，这种无散的特性，是在视觉上让模拟具有真实感的最重要的一步。</p>\n<p>比如下面的图，展示了一个变化中的无散度的随机速度场。即便是这样一个随机场，在散度为零的时候，顺着这些速度运动的粒子都能在视觉上表现出很强的流体特征：<br><img src=\"https://i.imgur.com/dzunYiq.gif\" alt=\"随机无散场\"><br>对于无散场与流体模拟的更深刻的关系，以及如何在计算中保证速度场散度为零，我们将在后续的章节中进行深入介绍。</p>\n<p><strong>旋度</strong><br>旋度(curl)算子，顾名思义，用于描述向量场绕某点旋转的剧烈程度及方向。<br><img src=\"https://i.imgur.com/9jAsHWd.png\" alt=\"旋度\"><br>在三维空间中旋度是一个向量，它的计算方式为：<br>$$\\nabla\\times\\boldsymbol{u}=\\nabla\\times (u,v,w)=(\\frac{\\partial w}{\\partial y}-\\frac{\\partial v}{\\partial z}, \\frac{\\partial u}{\\partial z}-\\frac{\\partial w}{\\partial x}, \\frac{\\partial v}{\\partial x}-\\frac{\\partial u}{\\partial y})$$<br>要注意的是，一个向量场的旋度场是无散的，即我们总有：<br>$$\\nabla\\cdot\\nabla\\times\\boldsymbol{u}=0$$<br>因此，在制作特效中，一些不需要太多真实感的流体模拟，可以用一种称为<strong>旋度噪声</strong>（<a href=\"http://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph2007-curlnoise.pdf\">Curl Noise</a>）的技术完成。具体说来，便是生成一些根据时间变化的三维<a href=\"https://zhuanlan.zhihu.com/p/22337544\">Perlin噪声</a>，然后取其旋度作为速度场，并将粒子顺着速度场移动，即可得到如下效果：<br><img src=\"https://i.imgur.com/Z8aaI3L.jpg\" alt=\"旋度噪声\"><br>有兴趣的读者可以在这里看到WebGL实现的可交互效果和代码：<br><a href=\"http://graphics.thew.nu/curl/\">http://graphics.thew.nu/curl/</a><br>以及其他的一些<a href=\"http://prideout.net/blog/?p=63\">实现细节</a></p>\n<p>在接下来的章节，我们将利用以上的数学知识，从描述流体的最基本方程（纳维-斯托克斯方程）讲到如何生成细节丰富的特效。敬请期待。</p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.herokuapp.com/\">GraphiCon</a></p>\n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>"},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2017-03-14T22:11:25.388Z","updated":"2017-03-14T22:11:25.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0h6gau100055xdaj2pyo40l","content":"","excerpt":"","more":""},{"title":"用数学编辑3D模型（一）- Mesh Deformation with Laplacian coordinates","date":"2017-03-16T08:54:21.000Z","_content":"\n![teaser.png](https://ooo.0o0.ooo/2017/03/10/58c196b927ffd.png)\n\n想必在我们之前的[“光影之下”系列第一篇“从Logo谈起”](https://zhuanlan.zhihu.com/p/25766738)中，大家已经隐约感受到了ARAP（as-rigid-as-possible）这个能够尽量保持局部形状不变的全局变形法的强大功能。那么作为文中提到的M神，今天，我暂时还不能给大家介绍ARAP算法。因为凡事需从基础开始，所以，今天先来谈一谈ARAP所基于的最基本的一种3D模型形变方法——Mesh Deformation with Laplacian coordinates。注意，前方高能（公式有点多）！\n\n<!--more-->\n\n## 背景介绍\n\n在CG虚拟世界中，不同于以粒子表示的流体，固体与软体等有明确形状的实体物体通常是由包裹在其表面的三角形面片网格（triangle mesh）来离散化表示的。triangle mesh包括物体表面上的多个定义在三维空间中的离散采样点，以及连接它们所组成的三角形面片。采样点越密集，模型就越精细（如下图）。\n\n![meshRes.png](https://ooo.0o0.ooo/2017/03/10/58c196bf3e45d.png)\n\n要想对triangle mesh这类3D模型进行编辑，一般需要给离散点赋予新的三维位置坐标。显然，手动去设置每一个离散点的位置既不够直观又非常麻烦。所以，智能化的模型编辑工具对艺术家来说十分重要。\n\n事实上，在大多数编辑过程中，我们只是想去改变一个模型的姿势或者说大体形态（如下图所示的一种编辑），而不是模型的表面细节（比如这只大鸟的眼睛、肌肉突起）和组成部分（比如大鸟的四肢、头和尾）。\n\n![meshEdit.png](https://ooo.0o0.ooo/2017/03/10/58c196bd5209d.png)\n\n那么，有没有一种智能化的方法，能够让用户只需设置个别离散点的新位置来表达他所想要的形变，就能自动根据所需保持的形体信息来计算出剩余离散点应有的位置呢？我们今天要说的mesh deformation with Laplacian coordinates就是这样一种智能的模型编辑工具。\n\n## 基本方法\n\n该算法通过在满足用户设置的部分离散点新位置的情况下，最小化一个表征编辑前后模型表面细节差异的函数来求出新模型各离散点的位置，并由原有的连接构成新的triangle mesh。这种解决问题的方法叫做**数学优化**，我们在高中时学的求一元实函数的最值问题就是它的最简单的形式。这里我们的函数有$3n$个自变量（$n$为离散点个数，常见的从几百到上十万不等，每个离散点都定义在三维空间），属于多元函数，所以优化它还需要用到**线性代数**和**多元微积分**的知识。\n\n对每一个离散点$x\\_i \\in R^3$，其细节信息可以用定义在triangle mesh上的离散拉普拉斯算子（discrete Laplacian operator）来描述，即连接$x\\_i$到与$x\\_i$相连的所有离散点$x\\_j$，$j \\in N(i)$的中心位置的向量 $l\\_i= \\sum\\_{j}^{N(i)} w\\_{ij} x\\_{j}-x\\_{i}$ （如下图c）。\n这里算子中的权重$w\\_{ij}$可以是均匀权重，或者[cotangent权重](https://zhuanlan.zhihu.com/p/25496167)：$w\\_{ij} \\propto \\frac{1}{2}(\\cot \\alpha\\_j + \\cot \\beta\\_j)$（如下图b），且 $\\sum\\_j^{N(i)}w\\_{ij} = 1$ [[Desbrun et al. 1999]](http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf)。后者考虑到了离散采样点分布的不均匀性，能更好的描述该处的细节信息。\n\n![discreteLap.png](https://ooo.0o0.ooo/2017/03/10/58c196af20e2d.png)\n\n*\\*注1：我们将会在[“电影工业中的流体模拟”系列](https://zhuanlan.zhihu.com/p/25774747)的第三篇“纳维斯托克斯方程”中给出拉普拉斯算子在连续意义上的定义，以及它在均匀网格（uniform grid，常用来求偏微分方程数值解）上的计算式。*\n\n有了这个具有描述模型局部细节的算子，我们就可以写出需要最小化的目标函数了：\n\n$$f(x\\_1, x\\_2, ..., x\\_n) = \\sum\\_{i=1}^n \\| (\\sum\\_j^{N(i)} w\\_{ij}x\\_j - x\\_i) - l'\\_i \\|^2$$\n\n即最小化编辑前后模型间各对应点细节差异之和（这里$l'\\_i$为编辑前模型上点$i$处的discrete Laplacian，表示编辑前该点处的细节信息；向量间的差异用欧式距离度量）。同时还要注意用户输入的部分点所需满足的位置限定（position constraints）：\n\n$$x\\_k = p\\_k, k \\in M$$\n\n其中$M$为用户所选定的预先限定位置的离散点所组成的集合，$p\\_k$为对点$k$所指定的位置。为了在满足position constraints的同时最小化函数$f$，在mesh deformation的情境中我们一般用penalty method把这一constrained optimization problem转化为unconstrained optimization problem，即定义新的目标函数：\n\n$$f\\_p(x\\_1, x\\_2, ..., x\\_n) = \\sum\\_{i=1}^n \\| (\\sum\\_j^{N(i)} w\\_{ij}x\\_j - x\\_i) - l'\\_i \\|^2 + \\alpha\\sum\\_{k \\in M} \\| x\\_k - p\\_k\\|^2$$\n\n其中$\\alpha$为限制条件的严格程度，$\\alpha$越大，条件将被满足得越好；当$\\alpha$趋近于无穷时，条件将被严格满足。这样一来，优化$f\\_p$这个二次型就相当于在满足position constraints的情况下优化$f$了。由于二次型只有一个极值点（local optimum），所以这个极值点同时也是个最值点（global optimum），故可以直接令其梯度（gradient）为零以求出目标函数值最小时的自变量，也就是新模型各点的位置坐标。由于我们不希望强行以牺牲细节为代价去严格满足position constraints，故一般无需将$\\alpha$设置太大，在$[1, 10]$区间内效果就不错。\n\n*\\*注2：当需要在一个数学优化问题中严格地满足一个等式限定条件（equality constraints）时，通常还可采用拉格朗日乘子法（Lagrange Multipliers）将它转化成一个unconstrained问题求解。如果限定条件由不等式定义，则可考虑barrier method或Interior point method。详见[convex optimization [Boyd and Vandenberghe 2004]](https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf)。*\n\n前文提到的线性代数和多元微积分在这里的作用就是指导对多元函数的各种操作，比如$f\\_p$其实可以用矩阵的形式写成：\n\n$$f\\_p(x) = \\|Lx - l'\\|^2 + \\alpha \\| Sx - p \\|^2$$\n\n也就是一个Linear least squares。于是其梯度可以写成$g\\_p(x) = 2(L^TLx - L^T l') + 2\\alpha (S^TSx - S^Tp)$，那么问题就由此转化成了求解$x$，使得$g\\_p(x) = 0$，即求解线性方程组：\n\n$$(L^TL+\\alpha S^TS)x = L^Tl' + \\alpha S^Tp$$\n\n用计算机求解线性方程组需要用到**数值计算**工具，通常情况下我们可以直接调用现成的库（比如[Eigen](http://eigen.tuxfamily.org/)）。这里由于系数矩阵$L^TL+\\alpha S^TS$是稀疏的（sparse，因为每个点只有几个相邻的点，故非零系数个数$m$与方针列数$3n$满足$m \\sim O(3n)$）对称正定矩阵（symmetric positive definite matrix），所以我们可以选用sparse Cholesky decomposition或者conjugate gradient method来求解。关于这个线性方程组是否有解的问题，结论是当每个连通的triangle mesh上至少有一个离散点被用户选定并指定position constraint时，此方程组有唯一解，故不用担心。\n\n在实际求解过程中，由于目标函数中离散点坐标的三个维度之间并没有耦合，故可以分别对$x$、$y$、$z$三个维度进行求解。于是先选取sparse Cholesky decomposition对它们共同的系数矩阵进行分解，再对三个不同的RHS来做back-substitution就会非常快了。\n\n*\\*注3：求解线性方程组的方法主要分为直接法（direct method）和迭代法（iterative method）两大类，后者处理起大规模稀疏系统更有优势（详见[A First Course In Numerical Methods [Ascher and Greif 2011]](http://www.siam.org/books/cs07/)）。通常拿到一个线性方程组，若其系数矩阵不是方阵，一般可考虑先用normal equation将其转化为方阵线性系统。然后，我们首先要分析它是否有解：*\n\n - *若有唯一解，则可先使用direct method中求解一般线性系统的LU分解方法对其进行求解。有了这个保底选项后，再充分利用当前问题以及系数矩阵的性质来选取更合适的方法（比如上文选取的sparse Cholesky decomposition和conjugate gradient method）。*\n - *当遇到无解的情况时，可以使用normal equation把等式右边向量（RHS，right hand side）投影到系数矩阵的列向量空间（column space）中再进一步分析（投影后系统一定有解，但解不一定唯一）。*\n - *当遇到有无穷多个解的情况时，可以考虑使用truncated SVD求出模（norm）最小的那个解，或者根据实际问题的性质添加specific regularizer（也就是先验知识）告诉计算机根据你的需求找出最合适的那个解。*\n\n*在使用计算机求解线性方程组数值解的过程中，还可能遇到ill-condition的情况，即系统对误差非常敏感，求解过程十分不稳定，此时可考虑用preconditioning来解决。如果问题本身是一个linear Least squares，则还可考虑直接用QR分解来求解。*\n\n## 分析与改进\n\n该方法的实现过程主要就是根据原始模型数据，通过编程计算出上述系数矩阵和RHS，然后调用[Eigen](http://eigen.tuxfamily.org/)库求解线性方程组得到新的3D模型。至于如何获取用户设定的position constraints，则涉及到一些UI编程。\n\n那接下来我们就来测试一下这个方法！我们将一个章鱼模型的一条触须的根部和它身体的其余部分固定，再将该触须顶部向右下方拖拽（如下图a）。用上述方法求解后就可以得到下图b所示的结果。我们可以看到虽然大体形态基本是我们想要的，但所编辑触须上的细节并没有得到很好的保持，而是有所扭曲。相比之下，我们更希望得到下图c所示的结果。那么，问题究竟出在哪呢？\n\n![lapEdit.png](https://ooo.0o0.ooo/2017/03/10/58c196bad9cc1.png)\n\n问题就在于我们的discrete Laplacian并无法将只是经过了旋转的离散点局部细节判定为和之前相同，而事实上这种旋转在编辑过程中并不会改变局部细节。如下图所示的一个离散点和其邻近点所组成的局部，b由a旋转所得，我们认为a和b其实是具有一样的细节的，但他们两者的discrete Laplacian之差的欧氏距离很大。而c反而会被当前的算法认为和a很相似，但其实它已经是被扭曲了。\n\n![lapRot.png](https://ooo.0o0.ooo/2017/03/10/58c196afde4df.png)\n\n所以我们需要改进当前的目标函数，让它包含这种对旋转的容忍。假设我们想要的新模型上各点$x\\_i$局部相对于原始模型相应点$x'\\_i$局部之间的旋转关系为$R\\_il'\\_i=l\\_i$（这里$R\\_i$是一个$3\\times3$的旋转矩阵），那么我们就可以很容易的把目标函数改写成：\n\n$$f\\_{pr}(x\\_1, x\\_2, ..., x\\_n, R\\_1, R\\_2, ..., R\\_n) = \\sum\\_{i=1}^n \\| (\\sum\\_j^{N(i)} w\\_{ij}x\\_j - x\\_i) - R\\_il'\\_i \\|^2 + \\\\ \\alpha\\sum\\_{k \\in M} \\| x\\_k - p\\_k\\|^2$$\n\n以及对$R\\_i$必须是旋转矩阵的约束条件：\n\n$$R\\_i^TR\\_i = I, det(R\\_i) = 1$$\n\n这样就可以把上图a和b细节相同的考虑包含进来。至于上图c这种被扭曲反而不改变discrete Laplacian的情况，在对整个triangle mesh上的所有离散点同时求解时基本是不会出现的。虽然新的目标函数还是一个二次型，约束条件也还是等式，但这里的约束条件可不像之前的position constraints那么好对付了，因为这些constraints是nonlinear（非线性）的。即使再使用penalty method或者使用Lagrange Multipliers把问题转化为unconstrained problem，然后令其梯度等于零，得到的方程组也是非线性的，这使得我们之前用来求解线性方程组的工具都不够用，更别说如果这个非线性函数非凸（non-convex）的话，其极值点不一定都是最值点。\n\n*\\*注4：一般解非线性问题常用的是gradient descent（梯度下降法），Newton's method（牛顿法）等几类hill climbing method和它们的变种（详见[convex optimization [Boyd and Vandenberghe 2004]](https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf)）。在工程应用中，人们时常也会想一些trick（比如change of variables、local/global）来绕过问题中的nonlinearity或间接对其求解。对于找到的极值点不一定是最值点的问题，有一种解决办法是去找到一个合适的自变量起始点（initial guess），从这个起始点开始优化目标函数，得到的极值点即使不是最值点也是在应用场景中可接受的结果。*\n\n为了保持求解的简洁性，[[Lipman et al. 2004]](https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf)根据优化$f\\_p$得到的初步结果将$R\\_i$估算出来，然后直接代入$f\\_{pr}$再次优化求出最终的解，得到的结果也就是之前那张章鱼示意图中的图c了。然而我们很容易注意到，虽然图c的小圆圈变得没有那么扭曲了，但它们还是和图a中原始模型上的小圆圈差别很大，并不自然，毕竟估算出的$R\\_i$不一定准确。所以，我们还是不得不直接去面对这个nonlinear optimization problem。不过此刻，让我们继续来欣赏一些这个简单可行的方法的更多结果吧：\n\n![moreResults.jpg](https://ooo.0o0.ooo/2017/03/16/58ca18a3b021d.jpg)\n\n## 结语\n\n我们将会在本系列的第二篇中给大家介绍倍受业界欢迎的ARAP算法[[Sorkine and Alexa 2007]](https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf)，它采用了一种叫local/global的方法来求解这个非线性优化问题。\n\n*\\*注5：本文所讨论的优化问题，其目标函数都是光滑的，至少存在一阶导。那些不光滑（可以考虑使用[proximal algorithm [Parikh and Boyd 2014]](http://web.stanford.edu/~boyd/papers/prox_algs.html)来处理）甚至离散（比如graph search）的目标函数，常见于机器学习和人工智能中的优化问题。*\n\n## 参考文献\n\n[Sheffer, A. (2016). Computer Graphics: Modeling. [Powerpoint slides]](http://www.cs.ubc.ca/~sheffa/dgp/)\n\n[[Desbrun et al. 1999]](http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf) Desbrun, M., Meyer, M., Schröder, P., & Barr, A. H. (1999, July). Implicit fairing of irregular meshes using diffusion and curvature flow. In Proceedings of the 26th annual conference on Computer graphics and interactive techniques (pp. 317-324). ACM Press/Addison-Wesley Publishing Co..\n\n[[Boyd and Vandenberghe 2004]](https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf) Boyd, S., & Vandenberghe, L. (2004). Convex optimization. Cambridge university press.\n\n[[Ascher and Greif 2011]](http://www.siam.org/books/cs07/) Ascher, U. M., & Greif, C. (Eds.). (2011). A First Course on Numerical Methods. Society for Industrial and Applied Mathematics.\n\n[[Lipman et al. 2004]](https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf) Lipman, Y., Sorkine, O., Cohen-Or, D., Levin, D., Rossi, C., & Seidel, H. P. (2004, June). Differential coordinates for interactive mesh editing. In Shape Modeling Applications, 2004. Proceedings (pp. 181-190). IEEE.\n\n[[Sorkine and Alexa 2007]](https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf) Sorkine, O., & Alexa, M. (2007, July). As-rigid-as-possible surface modeling. In Symposium on Geometry processing (Vol. 4).\n\n[[Parikh and Boyd 2014]](http://web.stanford.edu/~boyd/papers/prox_algs.html) Parikh, N., & Boyd, S. (2014). Proximal algorithms. Foundations and Trends® in Optimization, 1(3), 127-239.\n\n<br/>\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\nGrapiCon图形控:有趣的图形学\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","source":"_posts/mesh-deformation-1.md","raw":"---\ntitle: 用数学编辑3D模型（一）- Mesh Deformation with Laplacian coordinates\ndate: 2017-03-16 09:54:21\ntags:\n---\n\n![teaser.png](https://ooo.0o0.ooo/2017/03/10/58c196b927ffd.png)\n\n想必在我们之前的[“光影之下”系列第一篇“从Logo谈起”](https://zhuanlan.zhihu.com/p/25766738)中，大家已经隐约感受到了ARAP（as-rigid-as-possible）这个能够尽量保持局部形状不变的全局变形法的强大功能。那么作为文中提到的M神，今天，我暂时还不能给大家介绍ARAP算法。因为凡事需从基础开始，所以，今天先来谈一谈ARAP所基于的最基本的一种3D模型形变方法——Mesh Deformation with Laplacian coordinates。注意，前方高能（公式有点多）！\n\n<!--more-->\n\n## 背景介绍\n\n在CG虚拟世界中，不同于以粒子表示的流体，固体与软体等有明确形状的实体物体通常是由包裹在其表面的三角形面片网格（triangle mesh）来离散化表示的。triangle mesh包括物体表面上的多个定义在三维空间中的离散采样点，以及连接它们所组成的三角形面片。采样点越密集，模型就越精细（如下图）。\n\n![meshRes.png](https://ooo.0o0.ooo/2017/03/10/58c196bf3e45d.png)\n\n要想对triangle mesh这类3D模型进行编辑，一般需要给离散点赋予新的三维位置坐标。显然，手动去设置每一个离散点的位置既不够直观又非常麻烦。所以，智能化的模型编辑工具对艺术家来说十分重要。\n\n事实上，在大多数编辑过程中，我们只是想去改变一个模型的姿势或者说大体形态（如下图所示的一种编辑），而不是模型的表面细节（比如这只大鸟的眼睛、肌肉突起）和组成部分（比如大鸟的四肢、头和尾）。\n\n![meshEdit.png](https://ooo.0o0.ooo/2017/03/10/58c196bd5209d.png)\n\n那么，有没有一种智能化的方法，能够让用户只需设置个别离散点的新位置来表达他所想要的形变，就能自动根据所需保持的形体信息来计算出剩余离散点应有的位置呢？我们今天要说的mesh deformation with Laplacian coordinates就是这样一种智能的模型编辑工具。\n\n## 基本方法\n\n该算法通过在满足用户设置的部分离散点新位置的情况下，最小化一个表征编辑前后模型表面细节差异的函数来求出新模型各离散点的位置，并由原有的连接构成新的triangle mesh。这种解决问题的方法叫做**数学优化**，我们在高中时学的求一元实函数的最值问题就是它的最简单的形式。这里我们的函数有$3n$个自变量（$n$为离散点个数，常见的从几百到上十万不等，每个离散点都定义在三维空间），属于多元函数，所以优化它还需要用到**线性代数**和**多元微积分**的知识。\n\n对每一个离散点$x\\_i \\in R^3$，其细节信息可以用定义在triangle mesh上的离散拉普拉斯算子（discrete Laplacian operator）来描述，即连接$x\\_i$到与$x\\_i$相连的所有离散点$x\\_j$，$j \\in N(i)$的中心位置的向量 $l\\_i= \\sum\\_{j}^{N(i)} w\\_{ij} x\\_{j}-x\\_{i}$ （如下图c）。\n这里算子中的权重$w\\_{ij}$可以是均匀权重，或者[cotangent权重](https://zhuanlan.zhihu.com/p/25496167)：$w\\_{ij} \\propto \\frac{1}{2}(\\cot \\alpha\\_j + \\cot \\beta\\_j)$（如下图b），且 $\\sum\\_j^{N(i)}w\\_{ij} = 1$ [[Desbrun et al. 1999]](http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf)。后者考虑到了离散采样点分布的不均匀性，能更好的描述该处的细节信息。\n\n![discreteLap.png](https://ooo.0o0.ooo/2017/03/10/58c196af20e2d.png)\n\n*\\*注1：我们将会在[“电影工业中的流体模拟”系列](https://zhuanlan.zhihu.com/p/25774747)的第三篇“纳维斯托克斯方程”中给出拉普拉斯算子在连续意义上的定义，以及它在均匀网格（uniform grid，常用来求偏微分方程数值解）上的计算式。*\n\n有了这个具有描述模型局部细节的算子，我们就可以写出需要最小化的目标函数了：\n\n$$f(x\\_1, x\\_2, ..., x\\_n) = \\sum\\_{i=1}^n \\| (\\sum\\_j^{N(i)} w\\_{ij}x\\_j - x\\_i) - l'\\_i \\|^2$$\n\n即最小化编辑前后模型间各对应点细节差异之和（这里$l'\\_i$为编辑前模型上点$i$处的discrete Laplacian，表示编辑前该点处的细节信息；向量间的差异用欧式距离度量）。同时还要注意用户输入的部分点所需满足的位置限定（position constraints）：\n\n$$x\\_k = p\\_k, k \\in M$$\n\n其中$M$为用户所选定的预先限定位置的离散点所组成的集合，$p\\_k$为对点$k$所指定的位置。为了在满足position constraints的同时最小化函数$f$，在mesh deformation的情境中我们一般用penalty method把这一constrained optimization problem转化为unconstrained optimization problem，即定义新的目标函数：\n\n$$f\\_p(x\\_1, x\\_2, ..., x\\_n) = \\sum\\_{i=1}^n \\| (\\sum\\_j^{N(i)} w\\_{ij}x\\_j - x\\_i) - l'\\_i \\|^2 + \\alpha\\sum\\_{k \\in M} \\| x\\_k - p\\_k\\|^2$$\n\n其中$\\alpha$为限制条件的严格程度，$\\alpha$越大，条件将被满足得越好；当$\\alpha$趋近于无穷时，条件将被严格满足。这样一来，优化$f\\_p$这个二次型就相当于在满足position constraints的情况下优化$f$了。由于二次型只有一个极值点（local optimum），所以这个极值点同时也是个最值点（global optimum），故可以直接令其梯度（gradient）为零以求出目标函数值最小时的自变量，也就是新模型各点的位置坐标。由于我们不希望强行以牺牲细节为代价去严格满足position constraints，故一般无需将$\\alpha$设置太大，在$[1, 10]$区间内效果就不错。\n\n*\\*注2：当需要在一个数学优化问题中严格地满足一个等式限定条件（equality constraints）时，通常还可采用拉格朗日乘子法（Lagrange Multipliers）将它转化成一个unconstrained问题求解。如果限定条件由不等式定义，则可考虑barrier method或Interior point method。详见[convex optimization [Boyd and Vandenberghe 2004]](https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf)。*\n\n前文提到的线性代数和多元微积分在这里的作用就是指导对多元函数的各种操作，比如$f\\_p$其实可以用矩阵的形式写成：\n\n$$f\\_p(x) = \\|Lx - l'\\|^2 + \\alpha \\| Sx - p \\|^2$$\n\n也就是一个Linear least squares。于是其梯度可以写成$g\\_p(x) = 2(L^TLx - L^T l') + 2\\alpha (S^TSx - S^Tp)$，那么问题就由此转化成了求解$x$，使得$g\\_p(x) = 0$，即求解线性方程组：\n\n$$(L^TL+\\alpha S^TS)x = L^Tl' + \\alpha S^Tp$$\n\n用计算机求解线性方程组需要用到**数值计算**工具，通常情况下我们可以直接调用现成的库（比如[Eigen](http://eigen.tuxfamily.org/)）。这里由于系数矩阵$L^TL+\\alpha S^TS$是稀疏的（sparse，因为每个点只有几个相邻的点，故非零系数个数$m$与方针列数$3n$满足$m \\sim O(3n)$）对称正定矩阵（symmetric positive definite matrix），所以我们可以选用sparse Cholesky decomposition或者conjugate gradient method来求解。关于这个线性方程组是否有解的问题，结论是当每个连通的triangle mesh上至少有一个离散点被用户选定并指定position constraint时，此方程组有唯一解，故不用担心。\n\n在实际求解过程中，由于目标函数中离散点坐标的三个维度之间并没有耦合，故可以分别对$x$、$y$、$z$三个维度进行求解。于是先选取sparse Cholesky decomposition对它们共同的系数矩阵进行分解，再对三个不同的RHS来做back-substitution就会非常快了。\n\n*\\*注3：求解线性方程组的方法主要分为直接法（direct method）和迭代法（iterative method）两大类，后者处理起大规模稀疏系统更有优势（详见[A First Course In Numerical Methods [Ascher and Greif 2011]](http://www.siam.org/books/cs07/)）。通常拿到一个线性方程组，若其系数矩阵不是方阵，一般可考虑先用normal equation将其转化为方阵线性系统。然后，我们首先要分析它是否有解：*\n\n - *若有唯一解，则可先使用direct method中求解一般线性系统的LU分解方法对其进行求解。有了这个保底选项后，再充分利用当前问题以及系数矩阵的性质来选取更合适的方法（比如上文选取的sparse Cholesky decomposition和conjugate gradient method）。*\n - *当遇到无解的情况时，可以使用normal equation把等式右边向量（RHS，right hand side）投影到系数矩阵的列向量空间（column space）中再进一步分析（投影后系统一定有解，但解不一定唯一）。*\n - *当遇到有无穷多个解的情况时，可以考虑使用truncated SVD求出模（norm）最小的那个解，或者根据实际问题的性质添加specific regularizer（也就是先验知识）告诉计算机根据你的需求找出最合适的那个解。*\n\n*在使用计算机求解线性方程组数值解的过程中，还可能遇到ill-condition的情况，即系统对误差非常敏感，求解过程十分不稳定，此时可考虑用preconditioning来解决。如果问题本身是一个linear Least squares，则还可考虑直接用QR分解来求解。*\n\n## 分析与改进\n\n该方法的实现过程主要就是根据原始模型数据，通过编程计算出上述系数矩阵和RHS，然后调用[Eigen](http://eigen.tuxfamily.org/)库求解线性方程组得到新的3D模型。至于如何获取用户设定的position constraints，则涉及到一些UI编程。\n\n那接下来我们就来测试一下这个方法！我们将一个章鱼模型的一条触须的根部和它身体的其余部分固定，再将该触须顶部向右下方拖拽（如下图a）。用上述方法求解后就可以得到下图b所示的结果。我们可以看到虽然大体形态基本是我们想要的，但所编辑触须上的细节并没有得到很好的保持，而是有所扭曲。相比之下，我们更希望得到下图c所示的结果。那么，问题究竟出在哪呢？\n\n![lapEdit.png](https://ooo.0o0.ooo/2017/03/10/58c196bad9cc1.png)\n\n问题就在于我们的discrete Laplacian并无法将只是经过了旋转的离散点局部细节判定为和之前相同，而事实上这种旋转在编辑过程中并不会改变局部细节。如下图所示的一个离散点和其邻近点所组成的局部，b由a旋转所得，我们认为a和b其实是具有一样的细节的，但他们两者的discrete Laplacian之差的欧氏距离很大。而c反而会被当前的算法认为和a很相似，但其实它已经是被扭曲了。\n\n![lapRot.png](https://ooo.0o0.ooo/2017/03/10/58c196afde4df.png)\n\n所以我们需要改进当前的目标函数，让它包含这种对旋转的容忍。假设我们想要的新模型上各点$x\\_i$局部相对于原始模型相应点$x'\\_i$局部之间的旋转关系为$R\\_il'\\_i=l\\_i$（这里$R\\_i$是一个$3\\times3$的旋转矩阵），那么我们就可以很容易的把目标函数改写成：\n\n$$f\\_{pr}(x\\_1, x\\_2, ..., x\\_n, R\\_1, R\\_2, ..., R\\_n) = \\sum\\_{i=1}^n \\| (\\sum\\_j^{N(i)} w\\_{ij}x\\_j - x\\_i) - R\\_il'\\_i \\|^2 + \\\\ \\alpha\\sum\\_{k \\in M} \\| x\\_k - p\\_k\\|^2$$\n\n以及对$R\\_i$必须是旋转矩阵的约束条件：\n\n$$R\\_i^TR\\_i = I, det(R\\_i) = 1$$\n\n这样就可以把上图a和b细节相同的考虑包含进来。至于上图c这种被扭曲反而不改变discrete Laplacian的情况，在对整个triangle mesh上的所有离散点同时求解时基本是不会出现的。虽然新的目标函数还是一个二次型，约束条件也还是等式，但这里的约束条件可不像之前的position constraints那么好对付了，因为这些constraints是nonlinear（非线性）的。即使再使用penalty method或者使用Lagrange Multipliers把问题转化为unconstrained problem，然后令其梯度等于零，得到的方程组也是非线性的，这使得我们之前用来求解线性方程组的工具都不够用，更别说如果这个非线性函数非凸（non-convex）的话，其极值点不一定都是最值点。\n\n*\\*注4：一般解非线性问题常用的是gradient descent（梯度下降法），Newton's method（牛顿法）等几类hill climbing method和它们的变种（详见[convex optimization [Boyd and Vandenberghe 2004]](https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf)）。在工程应用中，人们时常也会想一些trick（比如change of variables、local/global）来绕过问题中的nonlinearity或间接对其求解。对于找到的极值点不一定是最值点的问题，有一种解决办法是去找到一个合适的自变量起始点（initial guess），从这个起始点开始优化目标函数，得到的极值点即使不是最值点也是在应用场景中可接受的结果。*\n\n为了保持求解的简洁性，[[Lipman et al. 2004]](https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf)根据优化$f\\_p$得到的初步结果将$R\\_i$估算出来，然后直接代入$f\\_{pr}$再次优化求出最终的解，得到的结果也就是之前那张章鱼示意图中的图c了。然而我们很容易注意到，虽然图c的小圆圈变得没有那么扭曲了，但它们还是和图a中原始模型上的小圆圈差别很大，并不自然，毕竟估算出的$R\\_i$不一定准确。所以，我们还是不得不直接去面对这个nonlinear optimization problem。不过此刻，让我们继续来欣赏一些这个简单可行的方法的更多结果吧：\n\n![moreResults.jpg](https://ooo.0o0.ooo/2017/03/16/58ca18a3b021d.jpg)\n\n## 结语\n\n我们将会在本系列的第二篇中给大家介绍倍受业界欢迎的ARAP算法[[Sorkine and Alexa 2007]](https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf)，它采用了一种叫local/global的方法来求解这个非线性优化问题。\n\n*\\*注5：本文所讨论的优化问题，其目标函数都是光滑的，至少存在一阶导。那些不光滑（可以考虑使用[proximal algorithm [Parikh and Boyd 2014]](http://web.stanford.edu/~boyd/papers/prox_algs.html)来处理）甚至离散（比如graph search）的目标函数，常见于机器学习和人工智能中的优化问题。*\n\n## 参考文献\n\n[Sheffer, A. (2016). Computer Graphics: Modeling. [Powerpoint slides]](http://www.cs.ubc.ca/~sheffa/dgp/)\n\n[[Desbrun et al. 1999]](http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf) Desbrun, M., Meyer, M., Schröder, P., & Barr, A. H. (1999, July). Implicit fairing of irregular meshes using diffusion and curvature flow. In Proceedings of the 26th annual conference on Computer graphics and interactive techniques (pp. 317-324). ACM Press/Addison-Wesley Publishing Co..\n\n[[Boyd and Vandenberghe 2004]](https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf) Boyd, S., & Vandenberghe, L. (2004). Convex optimization. Cambridge university press.\n\n[[Ascher and Greif 2011]](http://www.siam.org/books/cs07/) Ascher, U. M., & Greif, C. (Eds.). (2011). A First Course on Numerical Methods. Society for Industrial and Applied Mathematics.\n\n[[Lipman et al. 2004]](https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf) Lipman, Y., Sorkine, O., Cohen-Or, D., Levin, D., Rossi, C., & Seidel, H. P. (2004, June). Differential coordinates for interactive mesh editing. In Shape Modeling Applications, 2004. Proceedings (pp. 181-190). IEEE.\n\n[[Sorkine and Alexa 2007]](https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf) Sorkine, O., & Alexa, M. (2007, July). As-rigid-as-possible surface modeling. In Symposium on Geometry processing (Vol. 4).\n\n[[Parikh and Boyd 2014]](http://web.stanford.edu/~boyd/papers/prox_algs.html) Parikh, N., & Boyd, S. (2014). Proximal algorithms. Foundations and Trends® in Optimization, 1(3), 127-239.\n\n<br/>\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\nGrapiCon图形控:有趣的图形学\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","slug":"mesh-deformation-1","published":1,"updated":"2017-03-19T17:25:24.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0h6gau300065xdaj4oe7tng","content":"<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196b927ffd.png\" alt=\"teaser.png\"></p>\n<p>想必在我们之前的<a href=\"https://zhuanlan.zhihu.com/p/25766738\" target=\"_blank\" rel=\"external\">“光影之下”系列第一篇“从Logo谈起”</a>中，大家已经隐约感受到了ARAP（as-rigid-as-possible）这个能够尽量保持局部形状不变的全局变形法的强大功能。那么作为文中提到的M神，今天，我暂时还不能给大家介绍ARAP算法。因为凡事需从基础开始，所以，今天先来谈一谈ARAP所基于的最基本的一种3D模型形变方法——Mesh Deformation with Laplacian coordinates。注意，前方高能（公式有点多）！</p>\n<a id=\"more\"></a>\n<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在CG虚拟世界中，不同于以粒子表示的流体，固体与软体等有明确形状的实体物体通常是由包裹在其表面的三角形面片网格（triangle mesh）来离散化表示的。triangle mesh包括物体表面上的多个定义在三维空间中的离散采样点，以及连接它们所组成的三角形面片。采样点越密集，模型就越精细（如下图）。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196bf3e45d.png\" alt=\"meshRes.png\"></p>\n<p>要想对triangle mesh这类3D模型进行编辑，一般需要给离散点赋予新的三维位置坐标。显然，手动去设置每一个离散点的位置既不够直观又非常麻烦。所以，智能化的模型编辑工具对艺术家来说十分重要。</p>\n<p>事实上，在大多数编辑过程中，我们只是想去改变一个模型的姿势或者说大体形态（如下图所示的一种编辑），而不是模型的表面细节（比如这只大鸟的眼睛、肌肉突起）和组成部分（比如大鸟的四肢、头和尾）。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196bd5209d.png\" alt=\"meshEdit.png\"></p>\n<p>那么，有没有一种智能化的方法，能够让用户只需设置个别离散点的新位置来表达他所想要的形变，就能自动根据所需保持的形体信息来计算出剩余离散点应有的位置呢？我们今天要说的mesh deformation with Laplacian coordinates就是这样一种智能的模型编辑工具。</p>\n<h2 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h2><p>该算法通过在满足用户设置的部分离散点新位置的情况下，最小化一个表征编辑前后模型表面细节差异的函数来求出新模型各离散点的位置，并由原有的连接构成新的triangle mesh。这种解决问题的方法叫做<strong>数学优化</strong>，我们在高中时学的求一元实函数的最值问题就是它的最简单的形式。这里我们的函数有$3n$个自变量（$n$为离散点个数，常见的从几百到上十万不等，每个离散点都定义在三维空间），属于多元函数，所以优化它还需要用到<strong>线性代数</strong>和<strong>多元微积分</strong>的知识。</p>\n<p>对每一个离散点$x_i \\in R^3$，其细节信息可以用定义在triangle mesh上的离散拉普拉斯算子（discrete Laplacian operator）来描述，即连接$x_i$到与$x_i$相连的所有离散点$x_j$，$j \\in N(i)$的中心位置的向量 $l_i= \\sum_{j}^{N(i)} w_{ij} x_{j}-x_{i}$ （如下图c）。<br>这里算子中的权重$w_{ij}$可以是均匀权重，或者<a href=\"https://zhuanlan.zhihu.com/p/25496167\" target=\"_blank\" rel=\"external\">cotangent权重</a>：$w_{ij} \\propto \\frac{1}{2}(\\cot \\alpha_j + \\cot \\beta_j)$（如下图b），且 $\\sum_j^{N(i)}w_{ij} = 1$ <a href=\"http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf\" target=\"_blank\" rel=\"external\">[Desbrun et al. 1999]</a>。后者考虑到了离散采样点分布的不均匀性，能更好的描述该处的细节信息。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196af20e2d.png\" alt=\"discreteLap.png\"></p>\n<p><em>\\</em>注1：我们将会在<a href=\"https://zhuanlan.zhihu.com/p/25774747\" target=\"_blank\" rel=\"external\">“电影工业中的流体模拟”系列</a>的第三篇“纳维斯托克斯方程”中给出拉普拉斯算子在连续意义上的定义，以及它在均匀网格（uniform grid，常用来求偏微分方程数值解）上的计算式。*</p>\n<p>有了这个具有描述模型局部细节的算子，我们就可以写出需要最小化的目标函数了：</p>\n<p>$$f(x_1, x_2, …, x_n) = \\sum_{i=1}^n | (\\sum_j^{N(i)} w_{ij}x_j - x_i) - l’_i |^2$$</p>\n<p>即最小化编辑前后模型间各对应点细节差异之和（这里$l’_i$为编辑前模型上点$i$处的discrete Laplacian，表示编辑前该点处的细节信息；向量间的差异用欧式距离度量）。同时还要注意用户输入的部分点所需满足的位置限定（position constraints）：</p>\n<p>$$x_k = p_k, k \\in M$$</p>\n<p>其中$M$为用户所选定的预先限定位置的离散点所组成的集合，$p_k$为对点$k$所指定的位置。为了在满足position constraints的同时最小化函数$f$，在mesh deformation的情境中我们一般用penalty method把这一constrained optimization problem转化为unconstrained optimization problem，即定义新的目标函数：</p>\n<p>$$f_p(x_1, x_2, …, x_n) = \\sum_{i=1}^n | (\\sum_j^{N(i)} w_{ij}x_j - x_i) - l’_i |^2 + \\alpha\\sum_{k \\in M} | x_k - p_k|^2$$</p>\n<p>其中$\\alpha$为限制条件的严格程度，$\\alpha$越大，条件将被满足得越好；当$\\alpha$趋近于无穷时，条件将被严格满足。这样一来，优化$f_p$这个二次型就相当于在满足position constraints的情况下优化$f$了。由于二次型只有一个极值点（local optimum），所以这个极值点同时也是个最值点（global optimum），故可以直接令其梯度（gradient）为零以求出目标函数值最小时的自变量，也就是新模型各点的位置坐标。由于我们不希望强行以牺牲细节为代价去严格满足position constraints，故一般无需将$\\alpha$设置太大，在$[1, 10]$区间内效果就不错。</p>\n<p><em>\\</em>注2：当需要在一个数学优化问题中严格地满足一个等式限定条件（equality constraints）时，通常还可采用拉格朗日乘子法（Lagrange Multipliers）将它转化成一个unconstrained问题求解。如果限定条件由不等式定义，则可考虑barrier method或Interior point method。详见<a href=\"https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf\" target=\"_blank\" rel=\"external\">convex optimization [Boyd and Vandenberghe 2004]</a>。*</p>\n<p>前文提到的线性代数和多元微积分在这里的作用就是指导对多元函数的各种操作，比如$f_p$其实可以用矩阵的形式写成：</p>\n<p>$$f_p(x) = |Lx - l’|^2 + \\alpha | Sx - p |^2$$</p>\n<p>也就是一个Linear least squares。于是其梯度可以写成$g_p(x) = 2(L^TLx - L^T l’) + 2\\alpha (S^TSx - S^Tp)$，那么问题就由此转化成了求解$x$，使得$g_p(x) = 0$，即求解线性方程组：</p>\n<p>$$(L^TL+\\alpha S^TS)x = L^Tl’ + \\alpha S^Tp$$</p>\n<p>用计算机求解线性方程组需要用到<strong>数值计算</strong>工具，通常情况下我们可以直接调用现成的库（比如<a href=\"http://eigen.tuxfamily.org/\" target=\"_blank\" rel=\"external\">Eigen</a>）。这里由于系数矩阵$L^TL+\\alpha S^TS$是稀疏的（sparse，因为每个点只有几个相邻的点，故非零系数个数$m$与方针列数$3n$满足$m \\sim O(3n)$）对称正定矩阵（symmetric positive definite matrix），所以我们可以选用sparse Cholesky decomposition或者conjugate gradient method来求解。关于这个线性方程组是否有解的问题，结论是当每个连通的triangle mesh上至少有一个离散点被用户选定并指定position constraint时，此方程组有唯一解，故不用担心。</p>\n<p>在实际求解过程中，由于目标函数中离散点坐标的三个维度之间并没有耦合，故可以分别对$x$、$y$、$z$三个维度进行求解。于是先选取sparse Cholesky decomposition对它们共同的系数矩阵进行分解，再对三个不同的RHS来做back-substitution就会非常快了。</p>\n<p><em>\\</em>注3：求解线性方程组的方法主要分为直接法（direct method）和迭代法（iterative method）两大类，后者处理起大规模稀疏系统更有优势（详见<a href=\"http://www.siam.org/books/cs07/\" target=\"_blank\" rel=\"external\">A First Course In Numerical Methods [Ascher and Greif 2011]</a>）。通常拿到一个线性方程组，若其系数矩阵不是方阵，一般可考虑先用normal equation将其转化为方阵线性系统。然后，我们首先要分析它是否有解：*</p>\n<ul>\n<li><em>若有唯一解，则可先使用direct method中求解一般线性系统的LU分解方法对其进行求解。有了这个保底选项后，再充分利用当前问题以及系数矩阵的性质来选取更合适的方法（比如上文选取的sparse Cholesky decomposition和conjugate gradient method）。</em></li>\n<li><em>当遇到无解的情况时，可以使用normal equation把等式右边向量（RHS，right hand side）投影到系数矩阵的列向量空间（column space）中再进一步分析（投影后系统一定有解，但解不一定唯一）。</em></li>\n<li><em>当遇到有无穷多个解的情况时，可以考虑使用truncated SVD求出模（norm）最小的那个解，或者根据实际问题的性质添加specific regularizer（也就是先验知识）告诉计算机根据你的需求找出最合适的那个解。</em></li>\n</ul>\n<p><em>在使用计算机求解线性方程组数值解的过程中，还可能遇到ill-condition的情况，即系统对误差非常敏感，求解过程十分不稳定，此时可考虑用preconditioning来解决。如果问题本身是一个linear Least squares，则还可考虑直接用QR分解来求解。</em></p>\n<h2 id=\"分析与改进\"><a href=\"#分析与改进\" class=\"headerlink\" title=\"分析与改进\"></a>分析与改进</h2><p>该方法的实现过程主要就是根据原始模型数据，通过编程计算出上述系数矩阵和RHS，然后调用<a href=\"http://eigen.tuxfamily.org/\" target=\"_blank\" rel=\"external\">Eigen</a>库求解线性方程组得到新的3D模型。至于如何获取用户设定的position constraints，则涉及到一些UI编程。</p>\n<p>那接下来我们就来测试一下这个方法！我们将一个章鱼模型的一条触须的根部和它身体的其余部分固定，再将该触须顶部向右下方拖拽（如下图a）。用上述方法求解后就可以得到下图b所示的结果。我们可以看到虽然大体形态基本是我们想要的，但所编辑触须上的细节并没有得到很好的保持，而是有所扭曲。相比之下，我们更希望得到下图c所示的结果。那么，问题究竟出在哪呢？</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196bad9cc1.png\" alt=\"lapEdit.png\"></p>\n<p>问题就在于我们的discrete Laplacian并无法将只是经过了旋转的离散点局部细节判定为和之前相同，而事实上这种旋转在编辑过程中并不会改变局部细节。如下图所示的一个离散点和其邻近点所组成的局部，b由a旋转所得，我们认为a和b其实是具有一样的细节的，但他们两者的discrete Laplacian之差的欧氏距离很大。而c反而会被当前的算法认为和a很相似，但其实它已经是被扭曲了。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196afde4df.png\" alt=\"lapRot.png\"></p>\n<p>所以我们需要改进当前的目标函数，让它包含这种对旋转的容忍。假设我们想要的新模型上各点$x_i$局部相对于原始模型相应点$x’_i$局部之间的旋转关系为$R_il’_i=l_i$（这里$R_i$是一个$3\\times3$的旋转矩阵），那么我们就可以很容易的把目标函数改写成：</p>\n<p>$$f_{pr}(x_1, x_2, …, x_n, R_1, R_2, …, R_n) = \\sum_{i=1}^n | (\\sum_j^{N(i)} w_{ij}x_j - x_i) - R_il’_i |^2 + \\ \\alpha\\sum_{k \\in M} | x_k - p_k|^2$$</p>\n<p>以及对$R_i$必须是旋转矩阵的约束条件：</p>\n<p>$$R_i^TR_i = I, det(R_i) = 1$$</p>\n<p>这样就可以把上图a和b细节相同的考虑包含进来。至于上图c这种被扭曲反而不改变discrete Laplacian的情况，在对整个triangle mesh上的所有离散点同时求解时基本是不会出现的。虽然新的目标函数还是一个二次型，约束条件也还是等式，但这里的约束条件可不像之前的position constraints那么好对付了，因为这些constraints是nonlinear（非线性）的。即使再使用penalty method或者使用Lagrange Multipliers把问题转化为unconstrained problem，然后令其梯度等于零，得到的方程组也是非线性的，这使得我们之前用来求解线性方程组的工具都不够用，更别说如果这个非线性函数非凸（non-convex）的话，其极值点不一定都是最值点。</p>\n<p><em>\\</em>注4：一般解非线性问题常用的是gradient descent（梯度下降法），Newton’s method（牛顿法）等几类hill climbing method和它们的变种（详见<a href=\"https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf\" target=\"_blank\" rel=\"external\">convex optimization [Boyd and Vandenberghe 2004]</a>）。在工程应用中，人们时常也会想一些trick（比如change of variables、local/global）来绕过问题中的nonlinearity或间接对其求解。对于找到的极值点不一定是最值点的问题，有一种解决办法是去找到一个合适的自变量起始点（initial guess），从这个起始点开始优化目标函数，得到的极值点即使不是最值点也是在应用场景中可接受的结果。*</p>\n<p>为了保持求解的简洁性，<a href=\"https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf\" target=\"_blank\" rel=\"external\">[Lipman et al. 2004]</a>根据优化$f_p$得到的初步结果将$R_i$估算出来，然后直接代入$f_{pr}$再次优化求出最终的解，得到的结果也就是之前那张章鱼示意图中的图c了。然而我们很容易注意到，虽然图c的小圆圈变得没有那么扭曲了，但它们还是和图a中原始模型上的小圆圈差别很大，并不自然，毕竟估算出的$R_i$不一定准确。所以，我们还是不得不直接去面对这个nonlinear optimization problem。不过此刻，让我们继续来欣赏一些这个简单可行的方法的更多结果吧：</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/16/58ca18a3b021d.jpg\" alt=\"moreResults.jpg\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>我们将会在本系列的第二篇中给大家介绍倍受业界欢迎的ARAP算法<a href=\"https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf\" target=\"_blank\" rel=\"external\">[Sorkine and Alexa 2007]</a>，它采用了一种叫local/global的方法来求解这个非线性优化问题。</p>\n<p><em>\\</em>注5：本文所讨论的优化问题，其目标函数都是光滑的，至少存在一阶导。那些不光滑（可以考虑使用<a href=\"http://web.stanford.edu/~boyd/papers/prox_algs.html\" target=\"_blank\" rel=\"external\">proximal algorithm [Parikh and Boyd 2014]</a>来处理）甚至离散（比如graph search）的目标函数，常见于机器学习和人工智能中的优化问题。*</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.cs.ubc.ca/~sheffa/dgp/\" target=\"_blank\" rel=\"external\">Sheffer, A. (2016). Computer Graphics: Modeling. [Powerpoint slides]</a></p>\n<p><a href=\"http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf\" target=\"_blank\" rel=\"external\">[Desbrun et al. 1999]</a> Desbrun, M., Meyer, M., Schröder, P., &amp; Barr, A. H. (1999, July). Implicit fairing of irregular meshes using diffusion and curvature flow. In Proceedings of the 26th annual conference on Computer graphics and interactive techniques (pp. 317-324). ACM Press/Addison-Wesley Publishing Co..</p>\n<p><a href=\"https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf\" target=\"_blank\" rel=\"external\">[Boyd and Vandenberghe 2004]</a> Boyd, S., &amp; Vandenberghe, L. (2004). Convex optimization. Cambridge university press.</p>\n<p><a href=\"http://www.siam.org/books/cs07/\" target=\"_blank\" rel=\"external\">[Ascher and Greif 2011]</a> Ascher, U. M., &amp; Greif, C. (Eds.). (2011). A First Course on Numerical Methods. Society for Industrial and Applied Mathematics.</p>\n<p><a href=\"https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf\" target=\"_blank\" rel=\"external\">[Lipman et al. 2004]</a> Lipman, Y., Sorkine, O., Cohen-Or, D., Levin, D., Rossi, C., &amp; Seidel, H. P. (2004, June). Differential coordinates for interactive mesh editing. In Shape Modeling Applications, 2004. Proceedings (pp. 181-190). IEEE.</p>\n<p><a href=\"https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf\" target=\"_blank\" rel=\"external\">[Sorkine and Alexa 2007]</a> Sorkine, O., &amp; Alexa, M. (2007, July). As-rigid-as-possible surface modeling. In Symposium on Geometry processing (Vol. 4).</p>\n<p><a href=\"http://web.stanford.edu/~boyd/papers/prox_algs.html\" target=\"_blank\" rel=\"external\">[Parikh and Boyd 2014]</a> Parikh, N., &amp; Boyd, S. (2014). Proximal algorithms. Foundations and Trends® in Optimization, 1(3), 127-239.</p>\n<p><br></p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>GrapiCon图形控:有趣的图形学<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\" target=\"_blank\" rel=\"external\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\" target=\"_blank\" rel=\"external\">GraphiCon</a></p>\n<p><a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\"></a><br>本作品采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>\n","excerpt":"<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196b927ffd.png\" alt=\"teaser.png\"></p>\n<p>想必在我们之前的<a href=\"https://zhuanlan.zhihu.com/p/25766738\">“光影之下”系列第一篇“从Logo谈起”</a>中，大家已经隐约感受到了ARAP（as-rigid-as-possible）这个能够尽量保持局部形状不变的全局变形法的强大功能。那么作为文中提到的M神，今天，我暂时还不能给大家介绍ARAP算法。因为凡事需从基础开始，所以，今天先来谈一谈ARAP所基于的最基本的一种3D模型形变方法——Mesh Deformation with Laplacian coordinates。注意，前方高能（公式有点多）！</p>","more":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><p>在CG虚拟世界中，不同于以粒子表示的流体，固体与软体等有明确形状的实体物体通常是由包裹在其表面的三角形面片网格（triangle mesh）来离散化表示的。triangle mesh包括物体表面上的多个定义在三维空间中的离散采样点，以及连接它们所组成的三角形面片。采样点越密集，模型就越精细（如下图）。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196bf3e45d.png\" alt=\"meshRes.png\"></p>\n<p>要想对triangle mesh这类3D模型进行编辑，一般需要给离散点赋予新的三维位置坐标。显然，手动去设置每一个离散点的位置既不够直观又非常麻烦。所以，智能化的模型编辑工具对艺术家来说十分重要。</p>\n<p>事实上，在大多数编辑过程中，我们只是想去改变一个模型的姿势或者说大体形态（如下图所示的一种编辑），而不是模型的表面细节（比如这只大鸟的眼睛、肌肉突起）和组成部分（比如大鸟的四肢、头和尾）。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196bd5209d.png\" alt=\"meshEdit.png\"></p>\n<p>那么，有没有一种智能化的方法，能够让用户只需设置个别离散点的新位置来表达他所想要的形变，就能自动根据所需保持的形体信息来计算出剩余离散点应有的位置呢？我们今天要说的mesh deformation with Laplacian coordinates就是这样一种智能的模型编辑工具。</p>\n<h2 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h2><p>该算法通过在满足用户设置的部分离散点新位置的情况下，最小化一个表征编辑前后模型表面细节差异的函数来求出新模型各离散点的位置，并由原有的连接构成新的triangle mesh。这种解决问题的方法叫做<strong>数学优化</strong>，我们在高中时学的求一元实函数的最值问题就是它的最简单的形式。这里我们的函数有$3n$个自变量（$n$为离散点个数，常见的从几百到上十万不等，每个离散点都定义在三维空间），属于多元函数，所以优化它还需要用到<strong>线性代数</strong>和<strong>多元微积分</strong>的知识。</p>\n<p>对每一个离散点$x_i \\in R^3$，其细节信息可以用定义在triangle mesh上的离散拉普拉斯算子（discrete Laplacian operator）来描述，即连接$x_i$到与$x_i$相连的所有离散点$x_j$，$j \\in N(i)$的中心位置的向量 $l_i= \\sum_{j}^{N(i)} w_{ij} x_{j}-x_{i}$ （如下图c）。<br>这里算子中的权重$w_{ij}$可以是均匀权重，或者<a href=\"https://zhuanlan.zhihu.com/p/25496167\">cotangent权重</a>：$w_{ij} \\propto \\frac{1}{2}(\\cot \\alpha_j + \\cot \\beta_j)$（如下图b），且 $\\sum_j^{N(i)}w_{ij} = 1$ <a href=\"http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf\">[Desbrun et al. 1999]</a>。后者考虑到了离散采样点分布的不均匀性，能更好的描述该处的细节信息。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196af20e2d.png\" alt=\"discreteLap.png\"></p>\n<p><em>\\</em>注1：我们将会在<a href=\"https://zhuanlan.zhihu.com/p/25774747\">“电影工业中的流体模拟”系列</a>的第三篇“纳维斯托克斯方程”中给出拉普拉斯算子在连续意义上的定义，以及它在均匀网格（uniform grid，常用来求偏微分方程数值解）上的计算式。*</p>\n<p>有了这个具有描述模型局部细节的算子，我们就可以写出需要最小化的目标函数了：</p>\n<p>$$f(x_1, x_2, …, x_n) = \\sum_{i=1}^n | (\\sum_j^{N(i)} w_{ij}x_j - x_i) - l’_i |^2$$</p>\n<p>即最小化编辑前后模型间各对应点细节差异之和（这里$l’_i$为编辑前模型上点$i$处的discrete Laplacian，表示编辑前该点处的细节信息；向量间的差异用欧式距离度量）。同时还要注意用户输入的部分点所需满足的位置限定（position constraints）：</p>\n<p>$$x_k = p_k, k \\in M$$</p>\n<p>其中$M$为用户所选定的预先限定位置的离散点所组成的集合，$p_k$为对点$k$所指定的位置。为了在满足position constraints的同时最小化函数$f$，在mesh deformation的情境中我们一般用penalty method把这一constrained optimization problem转化为unconstrained optimization problem，即定义新的目标函数：</p>\n<p>$$f_p(x_1, x_2, …, x_n) = \\sum_{i=1}^n | (\\sum_j^{N(i)} w_{ij}x_j - x_i) - l’_i |^2 + \\alpha\\sum_{k \\in M} | x_k - p_k|^2$$</p>\n<p>其中$\\alpha$为限制条件的严格程度，$\\alpha$越大，条件将被满足得越好；当$\\alpha$趋近于无穷时，条件将被严格满足。这样一来，优化$f_p$这个二次型就相当于在满足position constraints的情况下优化$f$了。由于二次型只有一个极值点（local optimum），所以这个极值点同时也是个最值点（global optimum），故可以直接令其梯度（gradient）为零以求出目标函数值最小时的自变量，也就是新模型各点的位置坐标。由于我们不希望强行以牺牲细节为代价去严格满足position constraints，故一般无需将$\\alpha$设置太大，在$[1, 10]$区间内效果就不错。</p>\n<p><em>\\</em>注2：当需要在一个数学优化问题中严格地满足一个等式限定条件（equality constraints）时，通常还可采用拉格朗日乘子法（Lagrange Multipliers）将它转化成一个unconstrained问题求解。如果限定条件由不等式定义，则可考虑barrier method或Interior point method。详见<a href=\"https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf\">convex optimization [Boyd and Vandenberghe 2004]</a>。*</p>\n<p>前文提到的线性代数和多元微积分在这里的作用就是指导对多元函数的各种操作，比如$f_p$其实可以用矩阵的形式写成：</p>\n<p>$$f_p(x) = |Lx - l’|^2 + \\alpha | Sx - p |^2$$</p>\n<p>也就是一个Linear least squares。于是其梯度可以写成$g_p(x) = 2(L^TLx - L^T l’) + 2\\alpha (S^TSx - S^Tp)$，那么问题就由此转化成了求解$x$，使得$g_p(x) = 0$，即求解线性方程组：</p>\n<p>$$(L^TL+\\alpha S^TS)x = L^Tl’ + \\alpha S^Tp$$</p>\n<p>用计算机求解线性方程组需要用到<strong>数值计算</strong>工具，通常情况下我们可以直接调用现成的库（比如<a href=\"http://eigen.tuxfamily.org/\">Eigen</a>）。这里由于系数矩阵$L^TL+\\alpha S^TS$是稀疏的（sparse，因为每个点只有几个相邻的点，故非零系数个数$m$与方针列数$3n$满足$m \\sim O(3n)$）对称正定矩阵（symmetric positive definite matrix），所以我们可以选用sparse Cholesky decomposition或者conjugate gradient method来求解。关于这个线性方程组是否有解的问题，结论是当每个连通的triangle mesh上至少有一个离散点被用户选定并指定position constraint时，此方程组有唯一解，故不用担心。</p>\n<p>在实际求解过程中，由于目标函数中离散点坐标的三个维度之间并没有耦合，故可以分别对$x$、$y$、$z$三个维度进行求解。于是先选取sparse Cholesky decomposition对它们共同的系数矩阵进行分解，再对三个不同的RHS来做back-substitution就会非常快了。</p>\n<p><em>\\</em>注3：求解线性方程组的方法主要分为直接法（direct method）和迭代法（iterative method）两大类，后者处理起大规模稀疏系统更有优势（详见<a href=\"http://www.siam.org/books/cs07/\">A First Course In Numerical Methods [Ascher and Greif 2011]</a>）。通常拿到一个线性方程组，若其系数矩阵不是方阵，一般可考虑先用normal equation将其转化为方阵线性系统。然后，我们首先要分析它是否有解：*</p>\n<ul>\n<li><em>若有唯一解，则可先使用direct method中求解一般线性系统的LU分解方法对其进行求解。有了这个保底选项后，再充分利用当前问题以及系数矩阵的性质来选取更合适的方法（比如上文选取的sparse Cholesky decomposition和conjugate gradient method）。</em></li>\n<li><em>当遇到无解的情况时，可以使用normal equation把等式右边向量（RHS，right hand side）投影到系数矩阵的列向量空间（column space）中再进一步分析（投影后系统一定有解，但解不一定唯一）。</em></li>\n<li><em>当遇到有无穷多个解的情况时，可以考虑使用truncated SVD求出模（norm）最小的那个解，或者根据实际问题的性质添加specific regularizer（也就是先验知识）告诉计算机根据你的需求找出最合适的那个解。</em></li>\n</ul>\n<p><em>在使用计算机求解线性方程组数值解的过程中，还可能遇到ill-condition的情况，即系统对误差非常敏感，求解过程十分不稳定，此时可考虑用preconditioning来解决。如果问题本身是一个linear Least squares，则还可考虑直接用QR分解来求解。</em></p>\n<h2 id=\"分析与改进\"><a href=\"#分析与改进\" class=\"headerlink\" title=\"分析与改进\"></a>分析与改进</h2><p>该方法的实现过程主要就是根据原始模型数据，通过编程计算出上述系数矩阵和RHS，然后调用<a href=\"http://eigen.tuxfamily.org/\">Eigen</a>库求解线性方程组得到新的3D模型。至于如何获取用户设定的position constraints，则涉及到一些UI编程。</p>\n<p>那接下来我们就来测试一下这个方法！我们将一个章鱼模型的一条触须的根部和它身体的其余部分固定，再将该触须顶部向右下方拖拽（如下图a）。用上述方法求解后就可以得到下图b所示的结果。我们可以看到虽然大体形态基本是我们想要的，但所编辑触须上的细节并没有得到很好的保持，而是有所扭曲。相比之下，我们更希望得到下图c所示的结果。那么，问题究竟出在哪呢？</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196bad9cc1.png\" alt=\"lapEdit.png\"></p>\n<p>问题就在于我们的discrete Laplacian并无法将只是经过了旋转的离散点局部细节判定为和之前相同，而事实上这种旋转在编辑过程中并不会改变局部细节。如下图所示的一个离散点和其邻近点所组成的局部，b由a旋转所得，我们认为a和b其实是具有一样的细节的，但他们两者的discrete Laplacian之差的欧氏距离很大。而c反而会被当前的算法认为和a很相似，但其实它已经是被扭曲了。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c196afde4df.png\" alt=\"lapRot.png\"></p>\n<p>所以我们需要改进当前的目标函数，让它包含这种对旋转的容忍。假设我们想要的新模型上各点$x_i$局部相对于原始模型相应点$x’_i$局部之间的旋转关系为$R_il’_i=l_i$（这里$R_i$是一个$3\\times3$的旋转矩阵），那么我们就可以很容易的把目标函数改写成：</p>\n<p>$$f_{pr}(x_1, x_2, …, x_n, R_1, R_2, …, R_n) = \\sum_{i=1}^n | (\\sum_j^{N(i)} w_{ij}x_j - x_i) - R_il’_i |^2 + \\ \\alpha\\sum_{k \\in M} | x_k - p_k|^2$$</p>\n<p>以及对$R_i$必须是旋转矩阵的约束条件：</p>\n<p>$$R_i^TR_i = I, det(R_i) = 1$$</p>\n<p>这样就可以把上图a和b细节相同的考虑包含进来。至于上图c这种被扭曲反而不改变discrete Laplacian的情况，在对整个triangle mesh上的所有离散点同时求解时基本是不会出现的。虽然新的目标函数还是一个二次型，约束条件也还是等式，但这里的约束条件可不像之前的position constraints那么好对付了，因为这些constraints是nonlinear（非线性）的。即使再使用penalty method或者使用Lagrange Multipliers把问题转化为unconstrained problem，然后令其梯度等于零，得到的方程组也是非线性的，这使得我们之前用来求解线性方程组的工具都不够用，更别说如果这个非线性函数非凸（non-convex）的话，其极值点不一定都是最值点。</p>\n<p><em>\\</em>注4：一般解非线性问题常用的是gradient descent（梯度下降法），Newton’s method（牛顿法）等几类hill climbing method和它们的变种（详见<a href=\"https://web.stanford.edu/~boyd/cvxbook/bv\\_cvxbook.pdf\">convex optimization [Boyd and Vandenberghe 2004]</a>）。在工程应用中，人们时常也会想一些trick（比如change of variables、local/global）来绕过问题中的nonlinearity或间接对其求解。对于找到的极值点不一定是最值点的问题，有一种解决办法是去找到一个合适的自变量起始点（initial guess），从这个起始点开始优化目标函数，得到的极值点即使不是最值点也是在应用场景中可接受的结果。*</p>\n<p>为了保持求解的简洁性，<a href=\"https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf\">[Lipman et al. 2004]</a>根据优化$f_p$得到的初步结果将$R_i$估算出来，然后直接代入$f_{pr}$再次优化求出最终的解，得到的结果也就是之前那张章鱼示意图中的图c了。然而我们很容易注意到，虽然图c的小圆圈变得没有那么扭曲了，但它们还是和图a中原始模型上的小圆圈差别很大，并不自然，毕竟估算出的$R_i$不一定准确。所以，我们还是不得不直接去面对这个nonlinear optimization problem。不过此刻，让我们继续来欣赏一些这个简单可行的方法的更多结果吧：</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/16/58ca18a3b021d.jpg\" alt=\"moreResults.jpg\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>我们将会在本系列的第二篇中给大家介绍倍受业界欢迎的ARAP算法<a href=\"https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf\">[Sorkine and Alexa 2007]</a>，它采用了一种叫local/global的方法来求解这个非线性优化问题。</p>\n<p><em>\\</em>注5：本文所讨论的优化问题，其目标函数都是光滑的，至少存在一阶导。那些不光滑（可以考虑使用<a href=\"http://web.stanford.edu/~boyd/papers/prox_algs.html\">proximal algorithm [Parikh and Boyd 2014]</a>来处理）甚至离散（比如graph search）的目标函数，常见于机器学习和人工智能中的优化问题。*</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.cs.ubc.ca/~sheffa/dgp/\">Sheffer, A. (2016). Computer Graphics: Modeling. [Powerpoint slides]</a></p>\n<p><a href=\"http://w.multires.caltech.edu/pubs/ImplicitFairing.pdf\">[Desbrun et al. 1999]</a> Desbrun, M., Meyer, M., Schröder, P., &amp; Barr, A. H. (1999, July). Implicit fairing of irregular meshes using diffusion and curvature flow. In Proceedings of the 26th annual conference on Computer graphics and interactive techniques (pp. 317-324). ACM Press/Addison-Wesley Publishing Co..</p>\n<p><a href=\"https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf\">[Boyd and Vandenberghe 2004]</a> Boyd, S., &amp; Vandenberghe, L. (2004). Convex optimization. Cambridge university press.</p>\n<p><a href=\"http://www.siam.org/books/cs07/\">[Ascher and Greif 2011]</a> Ascher, U. M., &amp; Greif, C. (Eds.). (2011). A First Course on Numerical Methods. Society for Industrial and Applied Mathematics.</p>\n<p><a href=\"https://igl.ethz.ch/projects/Laplacian-mesh-processing/Laplacian-mesh-editing/diffcoords-editing.pdf\">[Lipman et al. 2004]</a> Lipman, Y., Sorkine, O., Cohen-Or, D., Levin, D., Rossi, C., &amp; Seidel, H. P. (2004, June). Differential coordinates for interactive mesh editing. In Shape Modeling Applications, 2004. Proceedings (pp. 181-190). IEEE.</p>\n<p><a href=\"https://www.igl.ethz.ch/projects/ARAP/arap_web.pdf\">[Sorkine and Alexa 2007]</a> Sorkine, O., &amp; Alexa, M. (2007, July). As-rigid-as-possible surface modeling. In Symposium on Geometry processing (Vol. 4).</p>\n<p><a href=\"http://web.stanford.edu/~boyd/papers/prox_algs.html\">[Parikh and Boyd 2014]</a> Parikh, N., &amp; Boyd, S. (2014). Proximal algorithms. Foundations and Trends® in Optimization, 1(3), 127-239.</p>\n<p><br/></p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>GrapiCon图形控:有趣的图形学<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\">GraphiCon</a></p>\n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>"},{"title":"光影之下（一）- 从Logo谈起","date":"2017-03-13T00:28:09.000Z","_content":"计算机图形学可以说是一门研究光与影的科学（当然不只研究光影），在渲染，3D重建，甚至3D打印，数字制造都有和光影相关的分支。不过今天我们要谈一个略微奇怪的方向，就从我们的LOGO说起吧！\n<!--more-->\n相信小伙伴们也注意到了吧，我们的LOGO是3D渲染的！\n什么？没注意？再show一下：\n![logo](https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png)\n\n它是怎么做的呢，其实我们造了一个模型。就像这个动图里这样，C字形加了一个小尾巴，看起来像G。一打光，就有一个C形的影子了。也就是我们GraphiCon的两个开头字母G，C。\n\n![logo.gif](https://ooo.0o0.ooo/2017/03/10/58c298ad8760d.gif)\n\n有这个想法也不是我们哪天突然开了个脑洞想出来的。其实在神书「哥德尔、艾舍尔、巴赫:集异璧之大成」的封面上就出现过这种效果，图中这个几何形状从3个方向看分别投影出G（Gödel），E（Escher）和B（Bach）3个字母。\n![GEB.jpg](https://ooo.0o0.ooo/2017/03/14/58c6ef95c06ac.jpg)\n\n这时候问题就来了，这时候问题就来了，**假如我们给出三个方向的影子作为输入，怎么生成这样一个几何形状呢？**还真有人想过这个事，2009年，现在都已经成为超级大牛的Niloy Mitra和Mark Pauly就发了这样一篇文章，名叫Shadow Art[[1]](#references)，从几何处理的角度解决了这个问题。\n\n我们先从头来看，这问题真的很难吗？拿三幅图在三个角度投个影求个交不就完事了？事实是这样吗？我们来试试！\n\n先从「集异璧」开始吧：\n我们在OpenSCAD里画一个长长的「G」和它的影子：\n![G](https://i.imgur.com/yubQ8LQ.png)\n再画个「E」和「B」还有他们的影子：\n![E](https://i.imgur.com/pA2LL96.png)![B](https://i.imgur.com/pdNMF82.png)\n再对它们求个交：\n![GEB](https://i.imgur.com/VXQCjuK.png)\nBingo！成了，这不很简单嘛～\n唔，我们把「B」调大点试试：\n![B_big](https://i.imgur.com/ZnrJwai.png)\n求个交：\n![bigGEB](https://i.imgur.com/MAbl3Fk.png)\n这什么鬼，怎么和说好的不一样？是巧合吧，难道这模型太复杂了？\n我们来试试简单的形状，比如三角形，方形和圆形：\n\n![triangle](https://i.imgur.com/bN8pqLY.png)![square](https://i.imgur.com/0GR7Pk4.png)\n![circle](https://i.imgur.com/6NdKLOj.png)\n开心地求个交：\n![enter image description here](https://i.imgur.com/uO4NYuK.png)\n什么？还是不行？看来「GEB」能work才是巧合啊。。。看来这事不简单啊！\n两位大牛也发现了这个问题，不过人家是大牛我是菜鸡就是因为人家想到了解法我只是在这发呆。\n让我们来看看这该怎么办。\n![Analysis](https://i.imgur.com/ABlkDSh.png)\n图里面绿色，粉色和紫色的投影部分就是本来属于一个图像但求交过程中被削去的的部分，或者叫做投影不一致的区域（inconsistent region），图中的红点就是一个投影不一致的像素（inconsistent pixel）。这样一看就明白啦，我们的目标就是消除投影不一致的像素，那么要么我们在原图里砍掉这些投影不一致的像素（我们当然不想要这种），要么就把其它视角的原图稍微变个形让这些投影不一致像素落到其它视角的图像内，让这种坏像素变成好像素好了。\n\n\n就这么简单？就这么简单！\n\n\n好吧，小伙伴们把家伙们都拿出来，变形嘛，就用最常用的As-rigid-as-possible deformation（ARAP）好了，这个方法用一句话说起来就是尽量保持局部形状不变的全局变形法，我们的M神会专门写一篇文章好好讲讲As-rigid-as-possible deformation（ARAP）。\n\nAnyway，「汽车人，变形！」\n![Optimization](https://i.imgur.com/fAhb1rL.png)\n比如我们想把中间米老鼠脚上的投影不一致像素变成好像素，我们选一圈坏像素（红色部分），找到他们在史努比视角和大力水手视角的对应点，然后用ARAP变形史努比和大力水手，使这些坏像素变成好像素，循环往复，最后就生成了新的史努比，米老鼠和大力水手。那么他们再求个交，就成了这样：\n![shadow_cartoon.gif](https://ooo.0o0.ooo/2017/03/14/58c7440edff04.gif)\nDone！\n\n这时候或许有人会问（没人问我自己问）：你讲半天为啥一个公式也没有？\n怪我咯？这篇文章里面就一个公式也没有！还是篇SIGGRAPH Asia\n![fule](https://i.imgur.com/iPN4p8E.jpg)\n\n或许你觉得这种文章没什么用，可人家还真有几篇follow up，借用投影和轮廓概念来建模的3D Modeling with Silhouettes[[2]](#references)，还有去年一篇算怎么用人来摆影子的paper：Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes[[3]](#references)\n\n大家看的是不是意犹未尽？反正我是写的停不下来。。。下一期「光影之下」会讲讲这篇文章里的另一个大牛Mark Pauly的代表性项目：Computaional caustics，敬请期待！（一大波公式正在接近中！！！）\n## References:\n[1]: [Shadow Art](http://vecg.cs.ucl.ac.uk/Projects/SmartGeometry/shadowArt/shadowArt_sigA_09.html); Niloy J. Mitra, Mark Pauly; ACM SIGGRAPH Asia 2009.\n[2]: [Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes](http://mrl.snu.ac.kr/research/ProjectShadowTheatre/ShadowTheatre.htm); Jungdam Won, Jehee Lee; SIGGRAPH 2016.\n[3]: [3D Modeling with Silhouettes](http://www.alecrivers.com/3dmodelingwithsilhouettes/); Alec Rivers, Frédo Durand, Takeo Igarashi; SIGGRAPH 2010.\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\nGrapiCon图形控:有趣的图形学\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","source":"_posts/Shadow-art.md","raw":"---\ntitle: 光影之下（一）- 从Logo谈起\ndate: 2017-03-13 01:28:09\ntags:\n---\n计算机图形学可以说是一门研究光与影的科学（当然不只研究光影），在渲染，3D重建，甚至3D打印，数字制造都有和光影相关的分支。不过今天我们要谈一个略微奇怪的方向，就从我们的LOGO说起吧！\n<!--more-->\n相信小伙伴们也注意到了吧，我们的LOGO是3D渲染的！\n什么？没注意？再show一下：\n![logo](https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png)\n\n它是怎么做的呢，其实我们造了一个模型。就像这个动图里这样，C字形加了一个小尾巴，看起来像G。一打光，就有一个C形的影子了。也就是我们GraphiCon的两个开头字母G，C。\n\n![logo.gif](https://ooo.0o0.ooo/2017/03/10/58c298ad8760d.gif)\n\n有这个想法也不是我们哪天突然开了个脑洞想出来的。其实在神书「哥德尔、艾舍尔、巴赫:集异璧之大成」的封面上就出现过这种效果，图中这个几何形状从3个方向看分别投影出G（Gödel），E（Escher）和B（Bach）3个字母。\n![GEB.jpg](https://ooo.0o0.ooo/2017/03/14/58c6ef95c06ac.jpg)\n\n这时候问题就来了，这时候问题就来了，**假如我们给出三个方向的影子作为输入，怎么生成这样一个几何形状呢？**还真有人想过这个事，2009年，现在都已经成为超级大牛的Niloy Mitra和Mark Pauly就发了这样一篇文章，名叫Shadow Art[[1]](#references)，从几何处理的角度解决了这个问题。\n\n我们先从头来看，这问题真的很难吗？拿三幅图在三个角度投个影求个交不就完事了？事实是这样吗？我们来试试！\n\n先从「集异璧」开始吧：\n我们在OpenSCAD里画一个长长的「G」和它的影子：\n![G](https://i.imgur.com/yubQ8LQ.png)\n再画个「E」和「B」还有他们的影子：\n![E](https://i.imgur.com/pA2LL96.png)![B](https://i.imgur.com/pdNMF82.png)\n再对它们求个交：\n![GEB](https://i.imgur.com/VXQCjuK.png)\nBingo！成了，这不很简单嘛～\n唔，我们把「B」调大点试试：\n![B_big](https://i.imgur.com/ZnrJwai.png)\n求个交：\n![bigGEB](https://i.imgur.com/MAbl3Fk.png)\n这什么鬼，怎么和说好的不一样？是巧合吧，难道这模型太复杂了？\n我们来试试简单的形状，比如三角形，方形和圆形：\n\n![triangle](https://i.imgur.com/bN8pqLY.png)![square](https://i.imgur.com/0GR7Pk4.png)\n![circle](https://i.imgur.com/6NdKLOj.png)\n开心地求个交：\n![enter image description here](https://i.imgur.com/uO4NYuK.png)\n什么？还是不行？看来「GEB」能work才是巧合啊。。。看来这事不简单啊！\n两位大牛也发现了这个问题，不过人家是大牛我是菜鸡就是因为人家想到了解法我只是在这发呆。\n让我们来看看这该怎么办。\n![Analysis](https://i.imgur.com/ABlkDSh.png)\n图里面绿色，粉色和紫色的投影部分就是本来属于一个图像但求交过程中被削去的的部分，或者叫做投影不一致的区域（inconsistent region），图中的红点就是一个投影不一致的像素（inconsistent pixel）。这样一看就明白啦，我们的目标就是消除投影不一致的像素，那么要么我们在原图里砍掉这些投影不一致的像素（我们当然不想要这种），要么就把其它视角的原图稍微变个形让这些投影不一致像素落到其它视角的图像内，让这种坏像素变成好像素好了。\n\n\n就这么简单？就这么简单！\n\n\n好吧，小伙伴们把家伙们都拿出来，变形嘛，就用最常用的As-rigid-as-possible deformation（ARAP）好了，这个方法用一句话说起来就是尽量保持局部形状不变的全局变形法，我们的M神会专门写一篇文章好好讲讲As-rigid-as-possible deformation（ARAP）。\n\nAnyway，「汽车人，变形！」\n![Optimization](https://i.imgur.com/fAhb1rL.png)\n比如我们想把中间米老鼠脚上的投影不一致像素变成好像素，我们选一圈坏像素（红色部分），找到他们在史努比视角和大力水手视角的对应点，然后用ARAP变形史努比和大力水手，使这些坏像素变成好像素，循环往复，最后就生成了新的史努比，米老鼠和大力水手。那么他们再求个交，就成了这样：\n![shadow_cartoon.gif](https://ooo.0o0.ooo/2017/03/14/58c7440edff04.gif)\nDone！\n\n这时候或许有人会问（没人问我自己问）：你讲半天为啥一个公式也没有？\n怪我咯？这篇文章里面就一个公式也没有！还是篇SIGGRAPH Asia\n![fule](https://i.imgur.com/iPN4p8E.jpg)\n\n或许你觉得这种文章没什么用，可人家还真有几篇follow up，借用投影和轮廓概念来建模的3D Modeling with Silhouettes[[2]](#references)，还有去年一篇算怎么用人来摆影子的paper：Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes[[3]](#references)\n\n大家看的是不是意犹未尽？反正我是写的停不下来。。。下一期「光影之下」会讲讲这篇文章里的另一个大牛Mark Pauly的代表性项目：Computaional caustics，敬请期待！（一大波公式正在接近中！！！）\n## References:\n[1]: [Shadow Art](http://vecg.cs.ucl.ac.uk/Projects/SmartGeometry/shadowArt/shadowArt_sigA_09.html); Niloy J. Mitra, Mark Pauly; ACM SIGGRAPH Asia 2009.\n[2]: [Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes](http://mrl.snu.ac.kr/research/ProjectShadowTheatre/ShadowTheatre.htm); Jungdam Won, Jehee Lee; SIGGRAPH 2016.\n[3]: [3D Modeling with Silhouettes](http://www.alecrivers.com/3dmodelingwithsilhouettes/); Alec Rivers, Frédo Durand, Takeo Igarashi; SIGGRAPH 2010.\n\n\\_(:3」∠)\\_ \\_(・ω・”∠)\\_ \\_(:з)∠)\\_ ∠( ᐛ 」∠)＿ \\_(:зゝ∠)\\_\nGrapiCon图形控:有趣的图形学\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qr code](https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png)\n如果你有什么想法，建议，或者想加入我们，你可以：\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","slug":"Shadow-art","published":1,"updated":"2017-03-14T22:32:03.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0h6gau400075xdaviaikb48","content":"<p>计算机图形学可以说是一门研究光与影的科学（当然不只研究光影），在渲染，3D重建，甚至3D打印，数字制造都有和光影相关的分支。不过今天我们要谈一个略微奇怪的方向，就从我们的LOGO说起吧！<br><a id=\"more\"></a><br>相信小伙伴们也注意到了吧，我们的LOGO是3D渲染的！<br>什么？没注意？再show一下：<br><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png\" alt=\"logo\"></p>\n<p>它是怎么做的呢，其实我们造了一个模型。就像这个动图里这样，C字形加了一个小尾巴，看起来像G。一打光，就有一个C形的影子了。也就是我们GraphiCon的两个开头字母G，C。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c298ad8760d.gif\" alt=\"logo.gif\"></p>\n<p>有这个想法也不是我们哪天突然开了个脑洞想出来的。其实在神书「哥德尔、艾舍尔、巴赫:集异璧之大成」的封面上就出现过这种效果，图中这个几何形状从3个方向看分别投影出G（Gödel），E（Escher）和B（Bach）3个字母。<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c6ef95c06ac.jpg\" alt=\"GEB.jpg\"></p>\n<p>这时候问题就来了，这时候问题就来了，<strong>假如我们给出三个方向的影子作为输入，怎么生成这样一个几何形状呢？</strong>还真有人想过这个事，2009年，现在都已经成为超级大牛的Niloy Mitra和Mark Pauly就发了这样一篇文章，名叫Shadow Art<a href=\"#references\">[1]</a>，从几何处理的角度解决了这个问题。</p>\n<p>我们先从头来看，这问题真的很难吗？拿三幅图在三个角度投个影求个交不就完事了？事实是这样吗？我们来试试！</p>\n<p>先从「集异璧」开始吧：<br>我们在OpenSCAD里画一个长长的「G」和它的影子：<br><img src=\"https://i.imgur.com/yubQ8LQ.png\" alt=\"G\"><br>再画个「E」和「B」还有他们的影子：<br><img src=\"https://i.imgur.com/pA2LL96.png\" alt=\"E\"><img src=\"https://i.imgur.com/pdNMF82.png\" alt=\"B\"><br>再对它们求个交：<br><img src=\"https://i.imgur.com/VXQCjuK.png\" alt=\"GEB\"><br>Bingo！成了，这不很简单嘛～<br>唔，我们把「B」调大点试试：<br><img src=\"https://i.imgur.com/ZnrJwai.png\" alt=\"B_big\"><br>求个交：<br><img src=\"https://i.imgur.com/MAbl3Fk.png\" alt=\"bigGEB\"><br>这什么鬼，怎么和说好的不一样？是巧合吧，难道这模型太复杂了？<br>我们来试试简单的形状，比如三角形，方形和圆形：</p>\n<p><img src=\"https://i.imgur.com/bN8pqLY.png\" alt=\"triangle\"><img src=\"https://i.imgur.com/0GR7Pk4.png\" alt=\"square\"><br><img src=\"https://i.imgur.com/6NdKLOj.png\" alt=\"circle\"><br>开心地求个交：<br><img src=\"https://i.imgur.com/uO4NYuK.png\" alt=\"enter image description here\"><br>什么？还是不行？看来「GEB」能work才是巧合啊。。。看来这事不简单啊！<br>两位大牛也发现了这个问题，不过人家是大牛我是菜鸡就是因为人家想到了解法我只是在这发呆。<br>让我们来看看这该怎么办。<br><img src=\"https://i.imgur.com/ABlkDSh.png\" alt=\"Analysis\"><br>图里面绿色，粉色和紫色的投影部分就是本来属于一个图像但求交过程中被削去的的部分，或者叫做投影不一致的区域（inconsistent region），图中的红点就是一个投影不一致的像素（inconsistent pixel）。这样一看就明白啦，我们的目标就是消除投影不一致的像素，那么要么我们在原图里砍掉这些投影不一致的像素（我们当然不想要这种），要么就把其它视角的原图稍微变个形让这些投影不一致像素落到其它视角的图像内，让这种坏像素变成好像素好了。</p>\n<p>就这么简单？就这么简单！</p>\n<p>好吧，小伙伴们把家伙们都拿出来，变形嘛，就用最常用的As-rigid-as-possible deformation（ARAP）好了，这个方法用一句话说起来就是尽量保持局部形状不变的全局变形法，我们的M神会专门写一篇文章好好讲讲As-rigid-as-possible deformation（ARAP）。</p>\n<p>Anyway，「汽车人，变形！」<br><img src=\"https://i.imgur.com/fAhb1rL.png\" alt=\"Optimization\"><br>比如我们想把中间米老鼠脚上的投影不一致像素变成好像素，我们选一圈坏像素（红色部分），找到他们在史努比视角和大力水手视角的对应点，然后用ARAP变形史努比和大力水手，使这些坏像素变成好像素，循环往复，最后就生成了新的史努比，米老鼠和大力水手。那么他们再求个交，就成了这样：<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7440edff04.gif\" alt=\"shadow_cartoon.gif\"><br>Done！</p>\n<p>这时候或许有人会问（没人问我自己问）：你讲半天为啥一个公式也没有？<br>怪我咯？这篇文章里面就一个公式也没有！还是篇SIGGRAPH Asia<br><img src=\"https://i.imgur.com/iPN4p8E.jpg\" alt=\"fule\"></p>\n<p>或许你觉得这种文章没什么用，可人家还真有几篇follow up，借用投影和轮廓概念来建模的3D Modeling with Silhouettes<a href=\"#references\">[2]</a>，还有去年一篇算怎么用人来摆影子的paper：Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes<a href=\"#references\">[3]</a></p>\n<p>大家看的是不是意犹未尽？反正我是写的停不下来。。。下一期「光影之下」会讲讲这篇文章里的另一个大牛Mark Pauly的代表性项目：Computaional caustics，敬请期待！（一大波公式正在接近中！！！）</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p>[1]: <a href=\"http://vecg.cs.ucl.ac.uk/Projects/SmartGeometry/shadowArt/shadowArt_sigA_09.html\" target=\"_blank\" rel=\"external\">Shadow Art</a>; Niloy J. Mitra, Mark Pauly; ACM SIGGRAPH Asia 2009.<br>[2]: <a href=\"http://mrl.snu.ac.kr/research/ProjectShadowTheatre/ShadowTheatre.htm\" target=\"_blank\" rel=\"external\">Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes</a>; Jungdam Won, Jehee Lee; SIGGRAPH 2016.<br>[3]: <a href=\"http://www.alecrivers.com/3dmodelingwithsilhouettes/\" target=\"_blank\" rel=\"external\">3D Modeling with Silhouettes</a>; Alec Rivers, Frédo Durand, Takeo Igarashi; SIGGRAPH 2010.</p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>GrapiCon图形控:有趣的图形学<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\" target=\"_blank\" rel=\"external\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\" target=\"_blank\" rel=\"external\">GraphiCon</a></p>\n<p><a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\"></a><br>本作品采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>\n","excerpt":"<p>计算机图形学可以说是一门研究光与影的科学（当然不只研究光影），在渲染，3D重建，甚至3D打印，数字制造都有和光影相关的分支。不过今天我们要谈一个略微奇怪的方向，就从我们的LOGO说起吧！<br>","more":"<br>相信小伙伴们也注意到了吧，我们的LOGO是3D渲染的！<br>什么？没注意？再show一下：<br><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png\" alt=\"logo\"></p>\n<p>它是怎么做的呢，其实我们造了一个模型。就像这个动图里这样，C字形加了一个小尾巴，看起来像G。一打光，就有一个C形的影子了。也就是我们GraphiCon的两个开头字母G，C。</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/03/10/58c298ad8760d.gif\" alt=\"logo.gif\"></p>\n<p>有这个想法也不是我们哪天突然开了个脑洞想出来的。其实在神书「哥德尔、艾舍尔、巴赫:集异璧之大成」的封面上就出现过这种效果，图中这个几何形状从3个方向看分别投影出G（Gödel），E（Escher）和B（Bach）3个字母。<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c6ef95c06ac.jpg\" alt=\"GEB.jpg\"></p>\n<p>这时候问题就来了，这时候问题就来了，<strong>假如我们给出三个方向的影子作为输入，怎么生成这样一个几何形状呢？</strong>还真有人想过这个事，2009年，现在都已经成为超级大牛的Niloy Mitra和Mark Pauly就发了这样一篇文章，名叫Shadow Art<a href=\"#references\">[1]</a>，从几何处理的角度解决了这个问题。</p>\n<p>我们先从头来看，这问题真的很难吗？拿三幅图在三个角度投个影求个交不就完事了？事实是这样吗？我们来试试！</p>\n<p>先从「集异璧」开始吧：<br>我们在OpenSCAD里画一个长长的「G」和它的影子：<br><img src=\"https://i.imgur.com/yubQ8LQ.png\" alt=\"G\"><br>再画个「E」和「B」还有他们的影子：<br><img src=\"https://i.imgur.com/pA2LL96.png\" alt=\"E\"><img src=\"https://i.imgur.com/pdNMF82.png\" alt=\"B\"><br>再对它们求个交：<br><img src=\"https://i.imgur.com/VXQCjuK.png\" alt=\"GEB\"><br>Bingo！成了，这不很简单嘛～<br>唔，我们把「B」调大点试试：<br><img src=\"https://i.imgur.com/ZnrJwai.png\" alt=\"B_big\"><br>求个交：<br><img src=\"https://i.imgur.com/MAbl3Fk.png\" alt=\"bigGEB\"><br>这什么鬼，怎么和说好的不一样？是巧合吧，难道这模型太复杂了？<br>我们来试试简单的形状，比如三角形，方形和圆形：</p>\n<p><img src=\"https://i.imgur.com/bN8pqLY.png\" alt=\"triangle\"><img src=\"https://i.imgur.com/0GR7Pk4.png\" alt=\"square\"><br><img src=\"https://i.imgur.com/6NdKLOj.png\" alt=\"circle\"><br>开心地求个交：<br><img src=\"https://i.imgur.com/uO4NYuK.png\" alt=\"enter image description here\"><br>什么？还是不行？看来「GEB」能work才是巧合啊。。。看来这事不简单啊！<br>两位大牛也发现了这个问题，不过人家是大牛我是菜鸡就是因为人家想到了解法我只是在这发呆。<br>让我们来看看这该怎么办。<br><img src=\"https://i.imgur.com/ABlkDSh.png\" alt=\"Analysis\"><br>图里面绿色，粉色和紫色的投影部分就是本来属于一个图像但求交过程中被削去的的部分，或者叫做投影不一致的区域（inconsistent region），图中的红点就是一个投影不一致的像素（inconsistent pixel）。这样一看就明白啦，我们的目标就是消除投影不一致的像素，那么要么我们在原图里砍掉这些投影不一致的像素（我们当然不想要这种），要么就把其它视角的原图稍微变个形让这些投影不一致像素落到其它视角的图像内，让这种坏像素变成好像素好了。</p>\n<p>就这么简单？就这么简单！</p>\n<p>好吧，小伙伴们把家伙们都拿出来，变形嘛，就用最常用的As-rigid-as-possible deformation（ARAP）好了，这个方法用一句话说起来就是尽量保持局部形状不变的全局变形法，我们的M神会专门写一篇文章好好讲讲As-rigid-as-possible deformation（ARAP）。</p>\n<p>Anyway，「汽车人，变形！」<br><img src=\"https://i.imgur.com/fAhb1rL.png\" alt=\"Optimization\"><br>比如我们想把中间米老鼠脚上的投影不一致像素变成好像素，我们选一圈坏像素（红色部分），找到他们在史努比视角和大力水手视角的对应点，然后用ARAP变形史努比和大力水手，使这些坏像素变成好像素，循环往复，最后就生成了新的史努比，米老鼠和大力水手。那么他们再求个交，就成了这样：<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7440edff04.gif\" alt=\"shadow_cartoon.gif\"><br>Done！</p>\n<p>这时候或许有人会问（没人问我自己问）：你讲半天为啥一个公式也没有？<br>怪我咯？这篇文章里面就一个公式也没有！还是篇SIGGRAPH Asia<br><img src=\"https://i.imgur.com/iPN4p8E.jpg\" alt=\"fule\"></p>\n<p>或许你觉得这种文章没什么用，可人家还真有几篇follow up，借用投影和轮廓概念来建模的3D Modeling with Silhouettes<a href=\"#references\">[2]</a>，还有去年一篇算怎么用人来摆影子的paper：Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes<a href=\"#references\">[3]</a></p>\n<p>大家看的是不是意犹未尽？反正我是写的停不下来。。。下一期「光影之下」会讲讲这篇文章里的另一个大牛Mark Pauly的代表性项目：Computaional caustics，敬请期待！（一大波公式正在接近中！！！）</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p>[1]: <a href=\"http://vecg.cs.ucl.ac.uk/Projects/SmartGeometry/shadowArt/shadowArt_sigA_09.html\">Shadow Art</a>; Niloy J. Mitra, Mark Pauly; ACM SIGGRAPH Asia 2009.<br>[2]: <a href=\"http://mrl.snu.ac.kr/research/ProjectShadowTheatre/ShadowTheatre.htm\">Shadow Theatre: Discovering Human Motion from a Sequence of Silhouettes</a>; Jungdam Won, Jehee Lee; SIGGRAPH 2016.<br>[3]: <a href=\"http://www.alecrivers.com/3dmodelingwithsilhouettes/\">3D Modeling with Silhouettes</a>; Alec Rivers, Frédo Durand, Takeo Igarashi; SIGGRAPH 2010.</p>\n<p>_(:3」∠)_ _(・ω・”∠)_ _(:з)∠)_ ∠( ᐛ 」∠)＿ _(:зゝ∠)_<br>GrapiCon图形控:有趣的图形学<br>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/14/58c7de193d7ac.png\" alt=\"qr code\"><br>如果你有什么想法，建议，或者想加入我们，你可以：<br>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\">GraphiCon</a></p>\n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>"},{"title":"GraphiCon!","date":"2017-03-13T00:28:09.000Z","_content":"![logo_small.png](https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png)\n同学们，小伙伴们，大牛们，小牛们，GraphiCon图形控开更了！\n<!--more-->\nGraphiCon取GraphicsCon图形控之意（类比lolicon）。\n\n我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。\n\nGraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。\n只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！\n\n我们的第一篇将会说说我们的Logo的故事！敬请期待！\n\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qrcode_GraphiCon.jpg](https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg)\n如果你有什么想法，建议，或者想加入我们，你可以：\n\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n\n<p align=\"right\">----GraphiCon敬上 </p>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","source":"_posts/GraphiCon.md","raw":"---\ntitle: GraphiCon!\ndate: 2017-03-13 01:28:09\ntags:\n---\n![logo_small.png](https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png)\n同学们，小伙伴们，大牛们，小牛们，GraphiCon图形控开更了！\n<!--more-->\nGraphiCon取GraphicsCon图形控之意（类比lolicon）。\n\n我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。\n\nGraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。\n只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！\n\n我们的第一篇将会说说我们的Logo的故事！敬请期待！\n\n请毫不犹豫地关注我们：\n我们的网站：[https://graphicon.io](https://graphicon.io)\n知乎专栏：[GraphiCon图形控](https://zhuanlan.zhihu.com/graphicon)\n公众号：GraphiCon\n![qrcode_GraphiCon.jpg](https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg)\n如果你有什么想法，建议，或者想加入我们，你可以：\n\n给我们发邮件：[hi@graphicon.io](mailto:hi@graphicon.io)\n加入我们的QQ群：SIQGRAPH（342086343）\n加入我们的slack群：[GraphiCon](https://graphicon.slack.com/)\n\n<p align=\"right\">----GraphiCon敬上 </p>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。\n","slug":"GraphiCon","published":1,"updated":"2017-03-14T22:11:25.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0h6gb2500095xdatpnfmf5p","content":"<p><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png\" alt=\"logo_small.png\"><br>同学们，小伙伴们，大牛们，小牛们，GraphiCon图形控开更了！<br><a id=\"more\"></a><br>GraphiCon取GraphicsCon图形控之意（类比lolicon）。</p>\n<p>我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。</p>\n<p>GraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。<br>只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！</p>\n<p>我们的第一篇将会说说我们的Logo的故事！敬请期待！</p>\n<p>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\" target=\"_blank\" rel=\"external\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg\" alt=\"qrcode_GraphiCon.jpg\"><br>如果你有什么想法，建议，或者想加入我们，你可以：</p>\n<p>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\" target=\"_blank\" rel=\"external\">GraphiCon</a></p>\n<p align=\"right\">—-GraphiCon敬上 </p>\n\n<p><a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\"></a><br>本作品采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>\n","excerpt":"<p><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5e9d32d311.png\" alt=\"logo_small.png\"><br>同学们，小伙伴们，大牛们，小牛们，GraphiCon图形控开更了！<br>","more":"<br>GraphiCon取GraphicsCon图形控之意（类比lolicon）。</p>\n<p>我们会把我们觉得有趣的，好玩的，有用的图形学相关的技术，知识，想法，资讯放到GraphiCon这个小空间里。</p>\n<p>GraphiCon的po主们虽然遍布天涯海角，在从事着不同的事，但都是痴迷计算机图形学的小伙伴们。<br>只要你也对计算机图形学感兴趣，或者喜欢好玩有趣狂拽酷炫的图形项目，那么你也是GraphiCon！</p>\n<p>我们的第一篇将会说说我们的Logo的故事！敬请期待！</p>\n<p>请毫不犹豫地关注我们：<br>我们的网站：<a href=\"https://graphicon.io\">https://graphicon.io</a><br>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/graphicon\">GraphiCon图形控</a><br>公众号：GraphiCon<br><img src=\"https://ooo.0o0.ooo/2017/03/13/58c5eab345ef3.jpg\" alt=\"qrcode_GraphiCon.jpg\"><br>如果你有什么想法，建议，或者想加入我们，你可以：</p>\n<p>给我们发邮件：<a href=\"mailto:hi@graphicon.io\">hi@graphicon.io</a><br>加入我们的QQ群：SIQGRAPH（342086343）<br>加入我们的slack群：<a href=\"https://graphicon.slack.com/\">GraphiCon</a></p>\n<p align=\"right\">—-GraphiCon敬上 </p>\n\n<p><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0h6gats00005xdaxd4qu4ll","tag_id":"cj0h6gaty00045xdao6rxfwqg","_id":"cj0h6gau600085xdarrpu6hz7"}],"Tag":[{"name":"Fluid Simulation","_id":"cj0h6gaty00045xdao6rxfwqg"}]}}